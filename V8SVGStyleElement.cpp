/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8SVGStyleElement.h"

#if ENABLE(SVG)

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include "V8SVGElement.h"

namespace WebCore {

WrapperTypeInfo V8SVGStyleElement::info = { V8SVGStyleElement::GetTemplate, V8SVGStyleElement::derefObject, 0 };

namespace SVGStyleElementInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> typeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGStyleElement.type._get");
    SVGStyleElement* imp = V8SVGStyleElement::toNative(info.Holder());
    return v8String(imp->type());
}

static void typeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGStyleElement.type._set");
    SVGStyleElement* imp = V8SVGStyleElement::toNative(info.Holder());
    V8Parameter<> v = value;
    ExceptionCode ec = 0;
    imp->setType(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
}

static v8::Handle<v8::Value> mediaAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGStyleElement.media._get");
    SVGStyleElement* imp = V8SVGStyleElement::toNative(info.Holder());
    return v8String(imp->media());
}

static void mediaAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGStyleElement.media._set");
    SVGStyleElement* imp = V8SVGStyleElement::toNative(info.Holder());
    V8Parameter<> v = value;
    ExceptionCode ec = 0;
    imp->setMedia(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
}

static v8::Handle<v8::Value> titleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGStyleElement.title._get");
    SVGStyleElement* imp = V8SVGStyleElement::toNative(info.Holder());
    return v8String(imp->title());
}

static void titleAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGStyleElement.title._set");
    SVGStyleElement* imp = V8SVGStyleElement::toNative(info.Holder());
    V8Parameter<> v = value;
    ExceptionCode ec = 0;
    imp->setTitle(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
}

static v8::Handle<v8::Value> xmllangAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGStyleElement.xmllang._get");
    SVGStyleElement* imp = V8SVGStyleElement::toNative(info.Holder());
    return v8String(imp->xmllang());
}

static void xmllangAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGStyleElement.xmllang._set");
    SVGStyleElement* imp = V8SVGStyleElement::toNative(info.Holder());
    V8Parameter<> v = value;
    imp->setXmllang(v);
    return;
}

static v8::Handle<v8::Value> xmlspaceAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGStyleElement.xmlspace._get");
    SVGStyleElement* imp = V8SVGStyleElement::toNative(info.Holder());
    return v8String(imp->xmlspace());
}

static void xmlspaceAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGStyleElement.xmlspace._set");
    SVGStyleElement* imp = V8SVGStyleElement::toNative(info.Holder());
    V8Parameter<> v = value;
    imp->setXmlspace(v);
    return;
}

} // namespace SVGStyleElementInternal

static const BatchedAttribute SVGStyleElementAttrs[] = {
    // Attribute 'type' (Type: 'attribute' ExtAttr: '')
    {"type", SVGStyleElementInternal::typeAttrGetter, SVGStyleElementInternal::typeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'media' (Type: 'attribute' ExtAttr: '')
    {"media", SVGStyleElementInternal::mediaAttrGetter, SVGStyleElementInternal::mediaAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'title' (Type: 'attribute' ExtAttr: '')
    {"title", SVGStyleElementInternal::titleAttrGetter, SVGStyleElementInternal::titleAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'xmllang' (Type: 'attribute' ExtAttr: '')
    {"xmllang", SVGStyleElementInternal::xmllangAttrGetter, SVGStyleElementInternal::xmllangAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'xmlspace' (Type: 'attribute' ExtAttr: '')
    {"xmlspace", SVGStyleElementInternal::xmlspaceAttrGetter, SVGStyleElementInternal::xmlspaceAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8SVGStyleElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "SVGStyleElement", V8SVGElement::GetTemplate(), V8SVGStyleElement::internalFieldCount,
        SVGStyleElementAttrs, sizeof(SVGStyleElementAttrs) / sizeof(*SVGStyleElementAttrs),
        0, 0);
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8SVGStyleElement::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8SVGStyleElementRawCache = createRawTemplate();
    return V8SVGStyleElementRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8SVGStyleElement::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8SVGStyleElementCache = ConfigureV8SVGStyleElementTemplate(GetRawTemplate());
    return V8SVGStyleElementCache;
}

SVGStyleElement* V8SVGStyleElement::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<SVGStyleElement*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8SVGStyleElement::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8SVGStyleElement::wrap(SVGStyleElement* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    if (impl->document()) {
        proxy = V8Proxy::retrieve(impl->document()->frame());
        if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl))
            proxy->windowShell()->initContextIfNeeded();
    }

        wrapper = V8DOMWrapper::getWrapper(impl);
        if (!wrapper.IsEmpty())
            return wrapper;

    v8::Handle<v8::Context> context;
    if (proxy)
        context = proxy->context();

    // Enter the node's context and create the wrapper in that context.
    if (!context.IsEmpty())
        context->Enter();
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    // Exit the node's context if it was entered.
    if (!context.IsEmpty())
        context->Exit();
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMNodeMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<SVGStyleElement > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(SVGStyleElement* impl)
{
    if (!impl)
        return v8::Null();
    return V8SVGStyleElement::wrap(impl);
}

void V8SVGStyleElement::derefObject(void* object)
{
    static_cast<SVGStyleElement*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(SVG)
