/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8MessageChannel.h"

#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8MessagePort.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8MessageChannel::info = { V8MessageChannel::GetTemplate, V8MessageChannel::derefObject, 0 };

namespace MessageChannelInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> port1AttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.MessageChannel.port1._get");
    MessageChannel* imp = V8MessageChannel::toNative(info.Holder());
    RefPtr<MessagePort> result = imp->port1();
    v8::Handle<v8::Value> wrapper = result.get() ? getActiveDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setHiddenReference(info.Holder(), wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> port2AttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.MessageChannel.port2._get");
    MessageChannel* imp = V8MessageChannel::toNative(info.Holder());
    RefPtr<MessagePort> result = imp->port2();
    v8::Handle<v8::Value> wrapper = result.get() ? getActiveDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setHiddenReference(info.Holder(), wrapper);
    }
    return wrapper;
}

} // namespace MessageChannelInternal

static const BatchedAttribute MessageChannelAttrs[] = {
    // Attribute 'port1' (Type: 'readonly attribute' ExtAttr: '')
    {"port1", MessageChannelInternal::port1AttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'port2' (Type: 'readonly attribute' ExtAttr: '')
    {"port2", MessageChannelInternal::port2AttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8MessageChannelTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "MessageChannel", v8::Persistent<v8::FunctionTemplate>(), V8MessageChannel::internalFieldCount,
        MessageChannelAttrs, sizeof(MessageChannelAttrs) / sizeof(*MessageChannelAttrs),
        0, 0);
        desc->SetCallHandler(V8MessageChannel::constructorCallback);
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8MessageChannel::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8MessageChannelRawCache = createRawTemplate();
    return V8MessageChannelRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8MessageChannel::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8MessageChannelCache = ConfigureV8MessageChannelTemplate(GetRawTemplate());
    return V8MessageChannelCache;
}

MessageChannel* V8MessageChannel::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<MessageChannel*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8MessageChannel::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8MessageChannel::wrap(MessageChannel* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMObjectMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<MessageChannel > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(MessageChannel* impl)
{
    if (!impl)
        return v8::Null();
    return V8MessageChannel::wrap(impl);
}

void V8MessageChannel::derefObject(void* object)
{
    static_cast<MessageChannel*>(object)->deref();
}

} // namespace WebCore
