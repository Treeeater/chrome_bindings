/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8IDBDatabaseException.h"

#if ENABLE(INDEXED_DATABASE)

#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8IDBDatabaseException::info = { V8IDBDatabaseException::GetTemplate, V8IDBDatabaseException::derefObject, 0 };

namespace IDBDatabaseExceptionInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> codeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBDatabaseException.code._get");
    IDBDatabaseException* imp = V8IDBDatabaseException::toNative(info.Holder());
    return v8::Integer::New(imp->code());
}

static void codeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBDatabaseException.code._set");
    IDBDatabaseException* imp = V8IDBDatabaseException::toNative(info.Holder());
    int v = toUInt32(value);
    imp->setCode(v);
    return;
}

static v8::Handle<v8::Value> messageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBDatabaseException.message._get");
    IDBDatabaseException* imp = V8IDBDatabaseException::toNative(info.Holder());
    return v8String(imp->message());
}

static void messageAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBDatabaseException.message._set");
    IDBDatabaseException* imp = V8IDBDatabaseException::toNative(info.Holder());
    V8Parameter<> v = value;
    imp->setMessage(v);
    return;
}

} // namespace IDBDatabaseExceptionInternal

static const BatchedAttribute IDBDatabaseExceptionAttrs[] = {
    // Attribute 'code' (Type: 'attribute' ExtAttr: '')
    {"code", IDBDatabaseExceptionInternal::codeAttrGetter, IDBDatabaseExceptionInternal::codeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'message' (Type: 'attribute' ExtAttr: '')
    {"message", IDBDatabaseExceptionInternal::messageAttrGetter, IDBDatabaseExceptionInternal::messageAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static const BatchedConstant IDBDatabaseExceptionConsts[] = {
    {"UNKNOWN_ERR", static_cast<signed int>(0)},
    {"NON_TRANSIENT_ERR", static_cast<signed int>(1)},
    {"NOT_FOUND_ERR", static_cast<signed int>(2)},
    {"CONSTRAINT_ERR", static_cast<signed int>(3)},
    {"DATA_ERR", static_cast<signed int>(4)},
    {"NOT_ALLOWED_ERR", static_cast<signed int>(5)},
    {"SERIAL_ERR", static_cast<signed int>(11)},
    {"RECOVERABLE_ERR", static_cast<signed int>(21)},
    {"TRANSIENT_ERR", static_cast<signed int>(31)},
    {"TIMEOUT_ERR", static_cast<signed int>(32)},
    {"DEADLOCK_ERR", static_cast<signed int>(33)},
};

COMPILE_ASSERT(0 == IDBDatabaseException::UNKNOWN_ERR, IDBDatabaseExceptionEnumUNKNOWN_ERRIsWrongUseDontCheckEnums);
COMPILE_ASSERT(1 == IDBDatabaseException::NON_TRANSIENT_ERR, IDBDatabaseExceptionEnumNON_TRANSIENT_ERRIsWrongUseDontCheckEnums);
COMPILE_ASSERT(2 == IDBDatabaseException::NOT_FOUND_ERR, IDBDatabaseExceptionEnumNOT_FOUND_ERRIsWrongUseDontCheckEnums);
COMPILE_ASSERT(3 == IDBDatabaseException::CONSTRAINT_ERR, IDBDatabaseExceptionEnumCONSTRAINT_ERRIsWrongUseDontCheckEnums);
COMPILE_ASSERT(4 == IDBDatabaseException::DATA_ERR, IDBDatabaseExceptionEnumDATA_ERRIsWrongUseDontCheckEnums);
COMPILE_ASSERT(5 == IDBDatabaseException::NOT_ALLOWED_ERR, IDBDatabaseExceptionEnumNOT_ALLOWED_ERRIsWrongUseDontCheckEnums);
COMPILE_ASSERT(11 == IDBDatabaseException::SERIAL_ERR, IDBDatabaseExceptionEnumSERIAL_ERRIsWrongUseDontCheckEnums);
COMPILE_ASSERT(21 == IDBDatabaseException::RECOVERABLE_ERR, IDBDatabaseExceptionEnumRECOVERABLE_ERRIsWrongUseDontCheckEnums);
COMPILE_ASSERT(31 == IDBDatabaseException::TRANSIENT_ERR, IDBDatabaseExceptionEnumTRANSIENT_ERRIsWrongUseDontCheckEnums);
COMPILE_ASSERT(32 == IDBDatabaseException::TIMEOUT_ERR, IDBDatabaseExceptionEnumTIMEOUT_ERRIsWrongUseDontCheckEnums);
COMPILE_ASSERT(33 == IDBDatabaseException::DEADLOCK_ERR, IDBDatabaseExceptionEnumDEADLOCK_ERRIsWrongUseDontCheckEnums);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8IDBDatabaseExceptionTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "IDBDatabaseException", v8::Persistent<v8::FunctionTemplate>(), V8IDBDatabaseException::internalFieldCount,
        IDBDatabaseExceptionAttrs, sizeof(IDBDatabaseExceptionAttrs) / sizeof(*IDBDatabaseExceptionAttrs),
        0, 0);
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    
    batchConfigureConstants(desc, proto, IDBDatabaseExceptionConsts, sizeof(IDBDatabaseExceptionConsts) / sizeof(*IDBDatabaseExceptionConsts));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8IDBDatabaseException::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8IDBDatabaseExceptionRawCache = createRawTemplate();
    return V8IDBDatabaseExceptionRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8IDBDatabaseException::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8IDBDatabaseExceptionCache = ConfigureV8IDBDatabaseExceptionTemplate(GetRawTemplate());
    return V8IDBDatabaseExceptionCache;
}

IDBDatabaseException* V8IDBDatabaseException::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<IDBDatabaseException*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8IDBDatabaseException::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8IDBDatabaseException::wrap(IDBDatabaseException* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMObjectMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<IDBDatabaseException > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(IDBDatabaseException* impl)
{
    if (!impl)
        return v8::Null();
    return V8IDBDatabaseException::wrap(impl);
}

void V8IDBDatabaseException::derefObject(void* object)
{
    static_cast<IDBDatabaseException*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(INDEXED_DATABASE)
