/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8HTMLDataGridCellElement.h"

#if ENABLE(DATAGRID)

#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8HTMLElement.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8HTMLDataGridCellElement::info = { V8HTMLDataGridCellElement::GetTemplate, V8HTMLDataGridCellElement::derefObject, 0 };

namespace HTMLDataGridCellElementInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> labelAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLDataGridCellElement.label._get");
    HTMLDataGridCellElement* imp = V8HTMLDataGridCellElement::toNative(info.Holder());
	if (!R_check(imp)) return v8::Handle<v8::Value>(v8::Undefined());
    return v8String(imp->label());
}

static void labelAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLDataGridCellElement.label._set");
    HTMLDataGridCellElement* imp = V8HTMLDataGridCellElement::toNative(info.Holder());
    V8Parameter<> v = value;
    imp->setLabel(v);
    return;
}

static v8::Handle<v8::Value> focusedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLDataGridCellElement.focused._get");
    HTMLDataGridCellElement* imp = V8HTMLDataGridCellElement::toNative(info.Holder());
	if (!R_check(imp)) return v8::Handle<v8::Value>(v8::Undefined());
    return v8Boolean(imp->focused());
}

static void focusedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLDataGridCellElement.focused._set");
    HTMLDataGridCellElement* imp = V8HTMLDataGridCellElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setFocused(v);
    return;
}

static v8::Handle<v8::Value> checkedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLDataGridCellElement.checked._get");
    HTMLDataGridCellElement* imp = V8HTMLDataGridCellElement::toNative(info.Holder());
	if (!R_check(imp)) return v8::Handle<v8::Value>(v8::Undefined());
    return v8Boolean(imp->checked());
}

static void checkedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLDataGridCellElement.checked._set");
    HTMLDataGridCellElement* imp = V8HTMLDataGridCellElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setChecked(v);
    return;
}

static v8::Handle<v8::Value> indeterminateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLDataGridCellElement.indeterminate._get");
    HTMLDataGridCellElement* imp = V8HTMLDataGridCellElement::toNative(info.Holder());
	if (!R_check(imp)) return v8::Handle<v8::Value>(v8::Undefined());
    return v8Boolean(imp->indeterminate());
}

static void indeterminateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLDataGridCellElement.indeterminate._set");
    HTMLDataGridCellElement* imp = V8HTMLDataGridCellElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setIndeterminate(v);
    return;
}

static v8::Handle<v8::Value> progressAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLDataGridCellElement.progress._get");
    HTMLDataGridCellElement* imp = V8HTMLDataGridCellElement::toNative(info.Holder());
	if (!R_check(imp)) return v8::Handle<v8::Value>(v8::Undefined());
    return v8::Number::New(imp->progress());
}

static void progressAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLDataGridCellElement.progress._set");
    HTMLDataGridCellElement* imp = V8HTMLDataGridCellElement::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    imp->setProgress(v);
    return;
}

} // namespace HTMLDataGridCellElementInternal

static const BatchedAttribute HTMLDataGridCellElementAttrs[] = {
    // Attribute 'label' (Type: 'attribute' ExtAttr: '')
    {"label", HTMLDataGridCellElementInternal::labelAttrGetter, HTMLDataGridCellElementInternal::labelAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'focused' (Type: 'attribute' ExtAttr: '')
    {"focused", HTMLDataGridCellElementInternal::focusedAttrGetter, HTMLDataGridCellElementInternal::focusedAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'checked' (Type: 'attribute' ExtAttr: '')
    {"checked", HTMLDataGridCellElementInternal::checkedAttrGetter, HTMLDataGridCellElementInternal::checkedAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'indeterminate' (Type: 'attribute' ExtAttr: '')
    {"indeterminate", HTMLDataGridCellElementInternal::indeterminateAttrGetter, HTMLDataGridCellElementInternal::indeterminateAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'progress' (Type: 'attribute' ExtAttr: '')
    {"progress", HTMLDataGridCellElementInternal::progressAttrGetter, HTMLDataGridCellElementInternal::progressAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLDataGridCellElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "HTMLDataGridCellElement", V8HTMLElement::GetTemplate(), V8HTMLDataGridCellElement::internalFieldCount,
        HTMLDataGridCellElementAttrs, sizeof(HTMLDataGridCellElementAttrs) / sizeof(*HTMLDataGridCellElementAttrs),
        0, 0);
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLDataGridCellElement::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8HTMLDataGridCellElementRawCache = createRawTemplate();
    return V8HTMLDataGridCellElementRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLDataGridCellElement::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8HTMLDataGridCellElementCache = ConfigureV8HTMLDataGridCellElementTemplate(GetRawTemplate());
    return V8HTMLDataGridCellElementCache;
}

HTMLDataGridCellElement* V8HTMLDataGridCellElement::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<HTMLDataGridCellElement*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8HTMLDataGridCellElement::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLDataGridCellElement::wrap(HTMLDataGridCellElement* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    if (impl->document()) {
        proxy = V8Proxy::retrieve(impl->document()->frame());
        if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl))
            proxy->windowShell()->initContextIfNeeded();
    }

        wrapper = V8DOMWrapper::getWrapper(impl);
        if (!wrapper.IsEmpty())
            return wrapper;

    v8::Handle<v8::Context> context;
    if (proxy)
        context = proxy->context();

    // Enter the node's context and create the wrapper in that context.
    if (!context.IsEmpty())
        context->Enter();
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    // Exit the node's context if it was entered.
    if (!context.IsEmpty())
        context->Exit();
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMNodeMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<HTMLDataGridCellElement > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(HTMLDataGridCellElement* impl)
{
    if (!impl)
        return v8::Null();
    return V8HTMLDataGridCellElement::wrap(impl);
}

void V8HTMLDataGridCellElement::derefObject(void* object)
{
    static_cast<HTMLDataGridCellElement*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(DATAGRID)
