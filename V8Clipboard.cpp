/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8Clipboard.h"

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8FileList.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8Clipboard::info = { V8Clipboard::GetTemplate, V8Clipboard::derefObject, 0 };

namespace ClipboardInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> dropEffectAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Clipboard.dropEffect._get");
    Clipboard* imp = V8Clipboard::toNative(info.Holder());
    return v8StringOrUndefined(imp->dropEffect());
}

static void dropEffectAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Clipboard.dropEffect._set");
    Clipboard* imp = V8Clipboard::toNative(info.Holder());
    V8Parameter<> v = value;
    imp->setDropEffect(v);
    return;
}

static v8::Handle<v8::Value> effectAllowedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Clipboard.effectAllowed._get");
    Clipboard* imp = V8Clipboard::toNative(info.Holder());
    return v8StringOrUndefined(imp->effectAllowed());
}

static void effectAllowedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Clipboard.effectAllowed._set");
    Clipboard* imp = V8Clipboard::toNative(info.Holder());
    V8Parameter<> v = value;
    imp->setEffectAllowed(v);
    return;
}

static v8::Handle<v8::Value> filesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Clipboard.files._get");
    Clipboard* imp = V8Clipboard::toNative(info.Holder());
    RefPtr<FileList> result = imp->files();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setHiddenReference(info.Holder(), wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> setDataCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Clipboard.setData");
    if (args.Length() < 2)
        return v8::Handle<v8::Value>();
    Clipboard* imp = V8Clipboard::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, type, args[0]);
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, data, args[1]);
    return v8Boolean(imp->setData(type, data));
}

} // namespace ClipboardInternal

static const BatchedAttribute ClipboardAttrs[] = {
    // Attribute 'dropEffect' (Type: 'attribute' ExtAttr: 'ConvertNullStringTo')
    {"dropEffect", ClipboardInternal::dropEffectAttrGetter, ClipboardInternal::dropEffectAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'effectAllowed' (Type: 'attribute' ExtAttr: 'ConvertNullStringTo')
    {"effectAllowed", ClipboardInternal::effectAllowedAttrGetter, ClipboardInternal::effectAllowedAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'types' (Type: 'readonly attribute' ExtAttr: 'CustomGetter')
    {"types", V8Clipboard::typesAccessorGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'files' (Type: 'readonly attribute' ExtAttr: '')
    {"files", ClipboardInternal::filesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static const BatchedCallback ClipboardCallbacks[] = {
    {"clearData", V8Clipboard::clearDataCallback},
    {"getData", V8Clipboard::getDataCallback},
    {"setData", ClipboardInternal::setDataCallback},
    {"setDragImage", V8Clipboard::setDragImageCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8ClipboardTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "Clipboard", v8::Persistent<v8::FunctionTemplate>(), V8Clipboard::internalFieldCount,
        ClipboardAttrs, sizeof(ClipboardAttrs) / sizeof(*ClipboardAttrs),
        ClipboardCallbacks, sizeof(ClipboardCallbacks) / sizeof(*ClipboardCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8Clipboard::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8ClipboardRawCache = createRawTemplate();
    return V8ClipboardRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8Clipboard::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8ClipboardCache = ConfigureV8ClipboardTemplate(GetRawTemplate());
    return V8ClipboardCache;
}

Clipboard* V8Clipboard::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<Clipboard*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8Clipboard::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8Clipboard::wrap(Clipboard* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMObjectMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<Clipboard > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(Clipboard* impl)
{
    if (!impl)
        return v8::Null();
    return V8Clipboard::wrap(impl);
}

void V8Clipboard::derefObject(void* object)
{
    static_cast<Clipboard*>(object)->deref();
}

} // namespace WebCore
