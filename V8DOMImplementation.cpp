/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8DOMImplementation.h"

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8CSSStyleSheet.h"
#include "V8DOMWrapper.h"
#include "V8Document.h"
#include "V8DocumentType.h"
#include "V8HTMLDocument.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

namespace WebCore {

WrapperTypeInfo V8DOMImplementation::info = { V8DOMImplementation::GetTemplate, V8DOMImplementation::derefObject, 0 };

namespace DOMImplementationInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> hasFeatureCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMImplementation.hasFeature");
    DOMImplementation* imp = V8DOMImplementation::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, feature, args[0]);
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithNullCheck>, version, args[1]);
    return v8Boolean(imp->hasFeature(feature, version));
}

static v8::Handle<v8::Value> createDocumentTypeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMImplementation.createDocumentType");
    DOMImplementation* imp = V8DOMImplementation::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithUndefinedOrNullCheck>, qualifiedName, args[0]);
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithUndefinedOrNullCheck>, publicId, args[1]);
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithUndefinedOrNullCheck>, systemId, args[2]);
    RefPtr<DocumentType> result = imp->createDocumentType(qualifiedName, publicId, systemId, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> createDocumentCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMImplementation.createDocument");
    DOMImplementation* imp = V8DOMImplementation::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithNullCheck>, namespaceURI, args[0]);
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithNullCheck>, qualifiedName, args[1]);
    EXCEPTION_BLOCK(DocumentType*, doctype, V8DocumentType::HasInstance(args[2]) ? V8DocumentType::toNative(v8::Handle<v8::Object>::Cast(args[2])) : 0);
    RefPtr<Document> result = imp->createDocument(namespaceURI, qualifiedName, doctype, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> createCSSStyleSheetCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMImplementation.createCSSStyleSheet");
    DOMImplementation* imp = V8DOMImplementation::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, title, args[0]);
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, media, args[1]);
    RefPtr<CSSStyleSheet> result = imp->createCSSStyleSheet(title, media, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> createHTMLDocumentCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMImplementation.createHTMLDocument");
    DOMImplementation* imp = V8DOMImplementation::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, title, args[0]);
    return toV8(imp->createHTMLDocument(title));
}

} // namespace DOMImplementationInternal

static const BatchedCallback DOMImplementationCallbacks[] = {
    {"hasFeature", DOMImplementationInternal::hasFeatureCallback},
    {"createDocumentType", DOMImplementationInternal::createDocumentTypeCallback},
    {"createCSSStyleSheet", DOMImplementationInternal::createCSSStyleSheetCallback},
    {"createHTMLDocument", DOMImplementationInternal::createHTMLDocumentCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8DOMImplementationTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "DOMImplementation", v8::Persistent<v8::FunctionTemplate>(), V8DOMImplementation::internalFieldCount,
        0, 0,
        DOMImplementationCallbacks, sizeof(DOMImplementationCallbacks) / sizeof(*DOMImplementationCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom Signature 'createDocument'
    const int createDocumentArgc = 3;
    v8::Handle<v8::FunctionTemplate> createDocumentArgv[createDocumentArgc] = { v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), V8DocumentType::GetRawTemplate() };
    v8::Handle<v8::Signature> createDocumentSignature = v8::Signature::New(desc, createDocumentArgc, createDocumentArgv);
    proto->Set(v8::String::New("createDocument"), v8::FunctionTemplate::New(DOMImplementationInternal::createDocumentCallback, v8::Handle<v8::Value>(), createDocumentSignature));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8DOMImplementation::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8DOMImplementationRawCache = createRawTemplate();
    return V8DOMImplementationRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8DOMImplementation::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8DOMImplementationCache = ConfigureV8DOMImplementationTemplate(GetRawTemplate());
    return V8DOMImplementationCache;
}

DOMImplementation* V8DOMImplementation::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<DOMImplementation*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8DOMImplementation::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8DOMImplementation::wrap(DOMImplementation* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<DOMImplementation > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(DOMImplementation* impl)
{
    if (!impl)
        return v8::Null();
    return V8DOMImplementation::wrap(impl);
}

void V8DOMImplementation::derefObject(void* object)
{
    static_cast<DOMImplementation*>(object)->deref();
}

} // namespace WebCore
