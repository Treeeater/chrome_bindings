/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8CSSVariablesDeclaration.h"

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8CSSRule.h"
#include "V8Collection.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8CSSVariablesDeclaration::info = { V8CSSVariablesDeclaration::GetTemplate, V8CSSVariablesDeclaration::derefObject, 0 };

namespace CSSVariablesDeclarationInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> cssTextAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.CSSVariablesDeclaration.cssText._get");
    CSSVariablesDeclaration* imp = V8CSSVariablesDeclaration::toNative(info.Holder());
    return v8String(imp->cssText());
}

static void cssTextAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.CSSVariablesDeclaration.cssText._set");
    CSSVariablesDeclaration* imp = V8CSSVariablesDeclaration::toNative(info.Holder());
    V8Parameter<> v = value;
    imp->setCssText(v);
    return;
}

static v8::Handle<v8::Value> lengthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.CSSVariablesDeclaration.length._get");
    CSSVariablesDeclaration* imp = V8CSSVariablesDeclaration::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->length());
}

static v8::Handle<v8::Value> parentRuleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.CSSVariablesDeclaration.parentRule._get");
    CSSVariablesDeclaration* imp = V8CSSVariablesDeclaration::toNative(info.Holder());
    RefPtr<CSSRule> result = imp->parentRule();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setHiddenReference(info.Holder(), wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> getVariableValueCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.CSSVariablesDeclaration.getVariableValue");
    CSSVariablesDeclaration* imp = V8CSSVariablesDeclaration::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, variableName, args[0]);
    return v8String(imp->getVariableValue(variableName));
}

static v8::Handle<v8::Value> removeVariableCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.CSSVariablesDeclaration.removeVariable");
    CSSVariablesDeclaration* imp = V8CSSVariablesDeclaration::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, variableName, args[0]);
    String result = imp->removeVariable(variableName, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8String(result);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> setVariableCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.CSSVariablesDeclaration.setVariable");
    CSSVariablesDeclaration* imp = V8CSSVariablesDeclaration::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, variableName, args[0]);
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, value, args[1]);
    imp->setVariable(variableName, value, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> itemCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.CSSVariablesDeclaration.item");
    CSSVariablesDeclaration* imp = V8CSSVariablesDeclaration::toNative(args.Holder());
    EXCEPTION_BLOCK(unsigned, index, toUInt32(args[0]));
    return v8String(imp->item(index));
}

} // namespace CSSVariablesDeclarationInternal

static const BatchedAttribute CSSVariablesDeclarationAttrs[] = {
    // Attribute 'cssText' (Type: 'attribute' ExtAttr: '')
    {"cssText", CSSVariablesDeclarationInternal::cssTextAttrGetter, CSSVariablesDeclarationInternal::cssTextAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'length' (Type: 'readonly attribute' ExtAttr: '')
    {"length", CSSVariablesDeclarationInternal::lengthAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'parentRule' (Type: 'readonly attribute' ExtAttr: '')
    {"parentRule", CSSVariablesDeclarationInternal::parentRuleAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static const BatchedCallback CSSVariablesDeclarationCallbacks[] = {
    {"getVariableValue", CSSVariablesDeclarationInternal::getVariableValueCallback},
    {"removeVariable", CSSVariablesDeclarationInternal::removeVariableCallback},
    {"setVariable", CSSVariablesDeclarationInternal::setVariableCallback},
    {"item", CSSVariablesDeclarationInternal::itemCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8CSSVariablesDeclarationTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "CSSVariablesDeclaration", v8::Persistent<v8::FunctionTemplate>(), V8CSSVariablesDeclaration::internalFieldCount,
        CSSVariablesDeclarationAttrs, sizeof(CSSVariablesDeclarationAttrs) / sizeof(*CSSVariablesDeclarationAttrs),
        CSSVariablesDeclarationCallbacks, sizeof(CSSVariablesDeclarationCallbacks) / sizeof(*CSSVariablesDeclarationCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    
    setCollectionStringIndexedGetter<CSSVariablesDeclaration>(desc);

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8CSSVariablesDeclaration::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8CSSVariablesDeclarationRawCache = createRawTemplate();
    return V8CSSVariablesDeclarationRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8CSSVariablesDeclaration::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8CSSVariablesDeclarationCache = ConfigureV8CSSVariablesDeclarationTemplate(GetRawTemplate());
    return V8CSSVariablesDeclarationCache;
}

CSSVariablesDeclaration* V8CSSVariablesDeclaration::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<CSSVariablesDeclaration*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8CSSVariablesDeclaration::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8CSSVariablesDeclaration::wrap(CSSVariablesDeclaration* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMObjectMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<CSSVariablesDeclaration > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(CSSVariablesDeclaration* impl)
{
    if (!impl)
        return v8::Null();
    return V8CSSVariablesDeclaration::wrap(impl);
}

void V8CSSVariablesDeclaration::derefObject(void* object)
{
    static_cast<CSSVariablesDeclaration*>(object)->deref();
}

} // namespace WebCore
