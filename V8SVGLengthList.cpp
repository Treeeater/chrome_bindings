/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8SVGLengthList.h"

#if ENABLE(SVG)

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "SVGElement.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include "V8SVGLength.h"
#include "V8SVGPODTypeWrapper.h"

namespace WebCore {

WrapperTypeInfo V8SVGLengthList::info = { V8SVGLengthList::GetTemplate, V8SVGLengthList::derefObject, 0 };

namespace SVGLengthListInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> numberOfItemsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGLengthList.numberOfItems._get");
    SVGLengthList* imp = V8SVGLengthList::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->numberOfItems());
}

static v8::Handle<v8::Value> clearCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGLengthList.clear");
    SVGLengthList* imp = V8SVGLengthList::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    imp->clear(ec);
    if (UNLIKELY(ec))
        goto fail;
    SVGElement* context = V8Proxy::svgContext(imp);
    context->svgAttributeChanged(imp->associatedAttributeName());
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> initializeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGLengthList.initialize");
    SVGLengthList* imp = V8SVGLengthList::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    bool itemOk;
    SVGLength item = V8SVGPODTypeUtil::toSVGPODType<SVGLength>(&V8SVGLength::info, args[0], itemOk);
    if (UNLIKELY(!itemOk)) {
        ec = TYPE_MISMATCH_ERR;
        goto fail;
    }
    SVGLength result = imp->initialize(item, ec);
    if (UNLIKELY(ec))
        goto fail;
    RefPtr<V8SVGPODTypeWrapper<SVGLength> > wrapper = V8SVGStaticPODTypeWrapper<SVGLength>::create(result);
    SVGElement* context = V8Proxy::svgContext(imp);
    V8Proxy::setSVGContext(wrapper.get(), context);
    context->svgAttributeChanged(imp->associatedAttributeName());
    return toV8(wrapper.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> getItemCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGLengthList.getItem");
    SVGLengthList* imp = V8SVGLengthList::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(unsigned, index, toUInt32(args[0]));
    SVGLength result = imp->getItem(index, ec);
    if (UNLIKELY(ec))
        goto fail;
    RefPtr<V8SVGPODTypeWrapper<SVGLength> > wrapper = V8SVGStaticPODTypeWrapper<SVGLength>::create(result);
    SVGElement* context = V8Proxy::svgContext(imp);
    V8Proxy::setSVGContext(wrapper.get(), context);
    return toV8(wrapper.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> insertItemBeforeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGLengthList.insertItemBefore");
    SVGLengthList* imp = V8SVGLengthList::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    bool itemOk;
    SVGLength item = V8SVGPODTypeUtil::toSVGPODType<SVGLength>(&V8SVGLength::info, args[0], itemOk);
    if (UNLIKELY(!itemOk)) {
        ec = TYPE_MISMATCH_ERR;
        goto fail;
    }
    EXCEPTION_BLOCK(unsigned, index, toUInt32(args[1]));
    SVGLength result = imp->insertItemBefore(item, index, ec);
    if (UNLIKELY(ec))
        goto fail;
    RefPtr<V8SVGPODTypeWrapper<SVGLength> > wrapper = V8SVGStaticPODTypeWrapper<SVGLength>::create(result);
    SVGElement* context = V8Proxy::svgContext(imp);
    V8Proxy::setSVGContext(wrapper.get(), context);
    context->svgAttributeChanged(imp->associatedAttributeName());
    return toV8(wrapper.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> replaceItemCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGLengthList.replaceItem");
    SVGLengthList* imp = V8SVGLengthList::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    bool itemOk;
    SVGLength item = V8SVGPODTypeUtil::toSVGPODType<SVGLength>(&V8SVGLength::info, args[0], itemOk);
    if (UNLIKELY(!itemOk)) {
        ec = TYPE_MISMATCH_ERR;
        goto fail;
    }
    EXCEPTION_BLOCK(unsigned, index, toUInt32(args[1]));
    SVGLength result = imp->replaceItem(item, index, ec);
    if (UNLIKELY(ec))
        goto fail;
    RefPtr<V8SVGPODTypeWrapper<SVGLength> > wrapper = V8SVGStaticPODTypeWrapper<SVGLength>::create(result);
    SVGElement* context = V8Proxy::svgContext(imp);
    V8Proxy::setSVGContext(wrapper.get(), context);
    context->svgAttributeChanged(imp->associatedAttributeName());
    return toV8(wrapper.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> removeItemCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGLengthList.removeItem");
    SVGLengthList* imp = V8SVGLengthList::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(unsigned, index, toUInt32(args[0]));
    SVGLength result = imp->removeItem(index, ec);
    if (UNLIKELY(ec))
        goto fail;
    RefPtr<V8SVGPODTypeWrapper<SVGLength> > wrapper = V8SVGStaticPODTypeWrapper<SVGLength>::create(result);
    SVGElement* context = V8Proxy::svgContext(imp);
    V8Proxy::setSVGContext(wrapper.get(), context);
    context->svgAttributeChanged(imp->associatedAttributeName());
    return toV8(wrapper.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> appendItemCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGLengthList.appendItem");
    SVGLengthList* imp = V8SVGLengthList::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    bool itemOk;
    SVGLength item = V8SVGPODTypeUtil::toSVGPODType<SVGLength>(&V8SVGLength::info, args[0], itemOk);
    if (UNLIKELY(!itemOk)) {
        ec = TYPE_MISMATCH_ERR;
        goto fail;
    }
    SVGLength result = imp->appendItem(item, ec);
    if (UNLIKELY(ec))
        goto fail;
    RefPtr<V8SVGPODTypeWrapper<SVGLength> > wrapper = V8SVGStaticPODTypeWrapper<SVGLength>::create(result);
    SVGElement* context = V8Proxy::svgContext(imp);
    V8Proxy::setSVGContext(wrapper.get(), context);
    context->svgAttributeChanged(imp->associatedAttributeName());
    return toV8(wrapper.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

} // namespace SVGLengthListInternal

static const BatchedAttribute SVGLengthListAttrs[] = {
    // Attribute 'numberOfItems' (Type: 'readonly attribute' ExtAttr: '')
    {"numberOfItems", SVGLengthListInternal::numberOfItemsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static const BatchedCallback SVGLengthListCallbacks[] = {
    {"clear", SVGLengthListInternal::clearCallback},
    {"initialize", SVGLengthListInternal::initializeCallback},
    {"getItem", SVGLengthListInternal::getItemCallback},
    {"insertItemBefore", SVGLengthListInternal::insertItemBeforeCallback},
    {"replaceItem", SVGLengthListInternal::replaceItemCallback},
    {"removeItem", SVGLengthListInternal::removeItemCallback},
    {"appendItem", SVGLengthListInternal::appendItemCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8SVGLengthListTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "SVGLengthList", v8::Persistent<v8::FunctionTemplate>(), V8SVGLengthList::internalFieldCount,
        SVGLengthListAttrs, sizeof(SVGLengthListAttrs) / sizeof(*SVGLengthListAttrs),
        SVGLengthListCallbacks, sizeof(SVGLengthListCallbacks) / sizeof(*SVGLengthListCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8SVGLengthList::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8SVGLengthListRawCache = createRawTemplate();
    return V8SVGLengthListRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8SVGLengthList::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8SVGLengthListCache = ConfigureV8SVGLengthListTemplate(GetRawTemplate());
    return V8SVGLengthListCache;
}

SVGLengthList* V8SVGLengthList::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<SVGLengthList*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8SVGLengthList::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8SVGLengthList::wrap(SVGLengthList* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMSVGObjectWithContextMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMSVGObjectWithContextMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<SVGLengthList > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(SVGLengthList* impl)
{
    if (!impl)
        return v8::Null();
    return V8SVGLengthList::wrap(impl);
}

void V8SVGLengthList::derefObject(void* object)
{
    static_cast<SVGLengthList*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(SVG)
