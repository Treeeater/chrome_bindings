/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8IDBCursor.h"

#if ENABLE(INDEXED_DATABASE)

#include "ExceptionCode.h"
#include "IDBBindingUtilities.h"
#include "IDBKey.h"
#include "RuntimeEnabledFeatures.h"
#include "SerializedScriptValue.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IDBAny.h"
#include "V8IDBKey.h"
#include "V8IDBRequest.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

namespace WebCore {

WrapperTypeInfo V8IDBCursor::info = { V8IDBCursor::GetTemplate, V8IDBCursor::derefObject, 0 };

namespace IDBCursorInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> directionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBCursor.direction._get");
    IDBCursor* imp = V8IDBCursor::toNative(info.Holder());
    return v8::Integer::New(imp->direction());
}

static v8::Handle<v8::Value> keyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBCursor.key._get");
    IDBCursor* imp = V8IDBCursor::toNative(info.Holder());
    return toV8(imp->key());
}

static v8::Handle<v8::Value> valueAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBCursor.value._get");
    IDBCursor* imp = V8IDBCursor::toNative(info.Holder());
    RefPtr<IDBAny> result = imp->value();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setHiddenReference(info.Holder(), wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> updateCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBCursor.update");
    IDBCursor* imp = V8IDBCursor::toNative(args.Holder());
    bool valueDidThrow = false;
    RefPtr<SerializedScriptValue> value = SerializedScriptValue::create(args[0], valueDidThrow);
    if (valueDidThrow)
        return v8::Undefined();
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    if (!scriptContext)
        return v8::Undefined();
    return toV8(imp->update(scriptContext, value));
}

static v8::Handle<v8::Value> continueCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBCursor.continue");
    IDBCursor* imp = V8IDBCursor::toNative(args.Holder());
    if (args.Length() <= 0) {
        ScriptExecutionContext* scriptContext = getScriptExecutionContext();
        if (!scriptContext)
            return v8::Undefined();
        return toV8(imp->continueFunction(scriptContext));
    }
    EXCEPTION_BLOCK(RefPtr<IDBKey>, key, createIDBKeyFromValue(args[0]));
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    if (!scriptContext)
        return v8::Undefined();
    return toV8(imp->continueFunction(scriptContext, key));
}

static v8::Handle<v8::Value> removeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBCursor.remove");
    IDBCursor* imp = V8IDBCursor::toNative(args.Holder());
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    if (!scriptContext)
        return v8::Undefined();
    return toV8(imp->remove(scriptContext));
}

} // namespace IDBCursorInternal

static const BatchedAttribute IDBCursorAttrs[] = {
    // Attribute 'direction' (Type: 'readonly attribute' ExtAttr: '')
    {"direction", IDBCursorInternal::directionAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'key' (Type: 'readonly attribute' ExtAttr: '')
    {"key", IDBCursorInternal::keyAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'value' (Type: 'readonly attribute' ExtAttr: '')
    {"value", IDBCursorInternal::valueAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static const BatchedCallback IDBCursorCallbacks[] = {
    {"update", IDBCursorInternal::updateCallback},
    {"continue", IDBCursorInternal::continueCallback},
    {"remove", IDBCursorInternal::removeCallback},
};
static const BatchedConstant IDBCursorConsts[] = {
    {"NEXT", static_cast<signed int>(0)},
    {"NEXT_NO_DUPLICATE", static_cast<signed int>(1)},
    {"PREV", static_cast<signed int>(2)},
    {"PREV_NO_DUPLICATE", static_cast<signed int>(3)},
};

COMPILE_ASSERT(0 == IDBCursor::NEXT, IDBCursorEnumNEXTIsWrongUseDontCheckEnums);
COMPILE_ASSERT(1 == IDBCursor::NEXT_NO_DUPLICATE, IDBCursorEnumNEXT_NO_DUPLICATEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(2 == IDBCursor::PREV, IDBCursorEnumPREVIsWrongUseDontCheckEnums);
COMPILE_ASSERT(3 == IDBCursor::PREV_NO_DUPLICATE, IDBCursorEnumPREV_NO_DUPLICATEIsWrongUseDontCheckEnums);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8IDBCursorTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "IDBCursor", v8::Persistent<v8::FunctionTemplate>(), V8IDBCursor::internalFieldCount,
        IDBCursorAttrs, sizeof(IDBCursorAttrs) / sizeof(*IDBCursorAttrs),
        IDBCursorCallbacks, sizeof(IDBCursorCallbacks) / sizeof(*IDBCursorCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    
    batchConfigureConstants(desc, proto, IDBCursorConsts, sizeof(IDBCursorConsts) / sizeof(*IDBCursorConsts));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8IDBCursor::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8IDBCursorRawCache = createRawTemplate();
    return V8IDBCursorRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8IDBCursor::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8IDBCursorCache = ConfigureV8IDBCursorTemplate(GetRawTemplate());
    return V8IDBCursorCache;
}

IDBCursor* V8IDBCursor::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<IDBCursor*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8IDBCursor::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8IDBCursor::wrap(IDBCursor* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMObjectMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<IDBCursor > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(IDBCursor* impl)
{
    if (!impl)
        return v8::Null();
    return V8IDBCursor::wrap(impl);
}

void V8IDBCursor::derefObject(void* object)
{
    static_cast<IDBCursor*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(INDEXED_DATABASE)
