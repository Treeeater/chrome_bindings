/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8HTMLFrameSetElement.h"

#include "EventListener.h"
#include "HTMLNames.h"
#include "RuntimeEnabledFeatures.h"
#include "V8AbstractEventListener.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8HTMLElement.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8HTMLFrameSetElement::info = { V8HTMLFrameSetElement::GetTemplate, V8HTMLFrameSetElement::derefObject, 0 };

namespace HTMLFrameSetElementInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> colsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.cols._get");
    return getElementStringAttr(info, HTMLNames::colsAttr);
}

static void colsAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.cols._set");
    setElementStringAttr(info, HTMLNames::colsAttr, value);
}

static v8::Handle<v8::Value> rowsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.rows._get");
    return getElementStringAttr(info, HTMLNames::rowsAttr);
}

static void rowsAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.rows._set");
    setElementStringAttr(info, HTMLNames::rowsAttr, value);
}

static v8::Handle<v8::Value> onbeforeunloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.onbeforeunload._get");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
	if (!R_check(imp)) return v8::Handle<v8::Value>(v8::Undefined());
    return imp->onbeforeunload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforeunload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onbeforeunloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.onbeforeunload._set");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onbeforeunload(), value, V8HTMLFrameSetElement::eventListenerCacheIndex);
    imp->setOnbeforeunload(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onhashchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.onhashchange._get");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
	if (!R_check(imp)) return v8::Handle<v8::Value>(v8::Undefined());
    return imp->onhashchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onhashchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onhashchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.onhashchange._set");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onhashchange(), value, V8HTMLFrameSetElement::eventListenerCacheIndex);
    imp->setOnhashchange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmessageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.onmessage._get");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
	if (!R_check(imp)) return v8::Handle<v8::Value>(v8::Undefined());
    return imp->onmessage() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmessage())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onmessageAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.onmessage._set");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onmessage(), value, V8HTMLFrameSetElement::eventListenerCacheIndex);
    imp->setOnmessage(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onofflineAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.onoffline._get");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
	if (!R_check(imp)) return v8::Handle<v8::Value>(v8::Undefined());
    return imp->onoffline() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onoffline())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onofflineAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.onoffline._set");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onoffline(), value, V8HTMLFrameSetElement::eventListenerCacheIndex);
    imp->setOnoffline(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ononlineAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.ononline._get");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
	if (!R_check(imp)) return v8::Handle<v8::Value>(v8::Undefined());
    return imp->ononline() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ononline())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ononlineAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.ononline._set");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ononline(), value, V8HTMLFrameSetElement::eventListenerCacheIndex);
    imp->setOnonline(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onpopstateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.onpopstate._get");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
	if (!R_check(imp)) return v8::Handle<v8::Value>(v8::Undefined());
    return imp->onpopstate() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onpopstate())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onpopstateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.onpopstate._set");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onpopstate(), value, V8HTMLFrameSetElement::eventListenerCacheIndex);
    imp->setOnpopstate(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onresizeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.onresize._get");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
	if (!R_check(imp)) return v8::Handle<v8::Value>(v8::Undefined());
    return imp->onresize() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onresize())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onresizeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.onresize._set");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onresize(), value, V8HTMLFrameSetElement::eventListenerCacheIndex);
    imp->setOnresize(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onstorageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.onstorage._get");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
	if (!R_check(imp)) return v8::Handle<v8::Value>(v8::Undefined());
    return imp->onstorage() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onstorage())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onstorageAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.onstorage._set");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onstorage(), value, V8HTMLFrameSetElement::eventListenerCacheIndex);
    imp->setOnstorage(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onunloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.onunload._get");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
	if (!R_check(imp)) return v8::Handle<v8::Value>(v8::Undefined());
    return imp->onunload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onunload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onunloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.onunload._set");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onunload(), value, V8HTMLFrameSetElement::eventListenerCacheIndex);
    imp->setOnunload(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onblurAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.onblur._get");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
	if (!R_check(imp)) return v8::Handle<v8::Value>(v8::Undefined());
    return imp->onblur() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onblur())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onblurAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.onblur._set");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onblur(), value, V8HTMLFrameSetElement::eventListenerCacheIndex);
    imp->setOnblur(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.onerror._get");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
	if (!R_check(imp)) return v8::Handle<v8::Value>(v8::Undefined());
    return imp->onerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.onerror._set");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onerror(), value, V8HTMLFrameSetElement::eventListenerCacheIndex);
    imp->setOnerror(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onfocusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.onfocus._get");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
	if (!R_check(imp)) return v8::Handle<v8::Value>(v8::Undefined());
    return imp->onfocus() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onfocus())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onfocusAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.onfocus._set");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onfocus(), value, V8HTMLFrameSetElement::eventListenerCacheIndex);
    imp->setOnfocus(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.onload._get");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
	if (!R_check(imp)) return v8::Handle<v8::Value>(v8::Undefined());
    return imp->onload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFrameSetElement.onload._set");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onload(), value, V8HTMLFrameSetElement::eventListenerCacheIndex);
    imp->setOnload(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

} // namespace HTMLFrameSetElementInternal

static const BatchedAttribute HTMLFrameSetElementAttrs[] = {
    // Attribute 'cols' (Type: 'attribute' ExtAttr: 'Reflect')
    {"cols", HTMLFrameSetElementInternal::colsAttrGetter, HTMLFrameSetElementInternal::colsAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'rows' (Type: 'attribute' ExtAttr: 'Reflect')
    {"rows", HTMLFrameSetElementInternal::rowsAttrGetter, HTMLFrameSetElementInternal::rowsAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onbeforeunload' (Type: 'attribute' ExtAttr: 'WindowEventListener DontEnum')
    {"onbeforeunload", HTMLFrameSetElementInternal::onbeforeunloadAttrGetter, HTMLFrameSetElementInternal::onbeforeunloadAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onhashchange' (Type: 'attribute' ExtAttr: 'WindowEventListener DontEnum')
    {"onhashchange", HTMLFrameSetElementInternal::onhashchangeAttrGetter, HTMLFrameSetElementInternal::onhashchangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmessage' (Type: 'attribute' ExtAttr: 'WindowEventListener DontEnum')
    {"onmessage", HTMLFrameSetElementInternal::onmessageAttrGetter, HTMLFrameSetElementInternal::onmessageAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onoffline' (Type: 'attribute' ExtAttr: 'WindowEventListener DontEnum')
    {"onoffline", HTMLFrameSetElementInternal::onofflineAttrGetter, HTMLFrameSetElementInternal::onofflineAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ononline' (Type: 'attribute' ExtAttr: 'WindowEventListener DontEnum')
    {"ononline", HTMLFrameSetElementInternal::ononlineAttrGetter, HTMLFrameSetElementInternal::ononlineAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onpopstate' (Type: 'attribute' ExtAttr: 'WindowEventListener DontEnum')
    {"onpopstate", HTMLFrameSetElementInternal::onpopstateAttrGetter, HTMLFrameSetElementInternal::onpopstateAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onresize' (Type: 'attribute' ExtAttr: 'WindowEventListener DontEnum')
    {"onresize", HTMLFrameSetElementInternal::onresizeAttrGetter, HTMLFrameSetElementInternal::onresizeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onstorage' (Type: 'attribute' ExtAttr: 'WindowEventListener DontEnum')
    {"onstorage", HTMLFrameSetElementInternal::onstorageAttrGetter, HTMLFrameSetElementInternal::onstorageAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onunload' (Type: 'attribute' ExtAttr: 'WindowEventListener DontEnum')
    {"onunload", HTMLFrameSetElementInternal::onunloadAttrGetter, HTMLFrameSetElementInternal::onunloadAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onblur' (Type: 'attribute' ExtAttr: 'WindowEventListener DontEnum')
    {"onblur", HTMLFrameSetElementInternal::onblurAttrGetter, HTMLFrameSetElementInternal::onblurAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onerror' (Type: 'attribute' ExtAttr: 'WindowEventListener DontEnum')
    {"onerror", HTMLFrameSetElementInternal::onerrorAttrGetter, HTMLFrameSetElementInternal::onerrorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onfocus' (Type: 'attribute' ExtAttr: 'WindowEventListener DontEnum')
    {"onfocus", HTMLFrameSetElementInternal::onfocusAttrGetter, HTMLFrameSetElementInternal::onfocusAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onload' (Type: 'attribute' ExtAttr: 'WindowEventListener DontEnum')
    {"onload", HTMLFrameSetElementInternal::onloadAttrGetter, HTMLFrameSetElementInternal::onloadAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLFrameSetElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "HTMLFrameSetElement", V8HTMLElement::GetTemplate(), V8HTMLFrameSetElement::internalFieldCount,
        HTMLFrameSetElementAttrs, sizeof(HTMLFrameSetElementAttrs) / sizeof(*HTMLFrameSetElementAttrs),
        0, 0);
    
    desc->InstanceTemplate()->SetNamedPropertyHandler(V8HTMLFrameSetElement::namedPropertyGetter, 0, 0, 0, 0);

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLFrameSetElement::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8HTMLFrameSetElementRawCache = createRawTemplate();
    return V8HTMLFrameSetElementRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLFrameSetElement::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8HTMLFrameSetElementCache = ConfigureV8HTMLFrameSetElementTemplate(GetRawTemplate());
    return V8HTMLFrameSetElementCache;
}

HTMLFrameSetElement* V8HTMLFrameSetElement::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<HTMLFrameSetElement*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8HTMLFrameSetElement::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLFrameSetElement::wrap(HTMLFrameSetElement* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    if (impl->document()) {
        proxy = V8Proxy::retrieve(impl->document()->frame());
        if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl))
            proxy->windowShell()->initContextIfNeeded();
    }

        wrapper = V8DOMWrapper::getWrapper(impl);
        if (!wrapper.IsEmpty())
            return wrapper;

    v8::Handle<v8::Context> context;
    if (proxy)
        context = proxy->context();

    // Enter the node's context and create the wrapper in that context.
    if (!context.IsEmpty())
        context->Enter();
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    // Exit the node's context if it was entered.
    if (!context.IsEmpty())
        context->Exit();
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMNodeMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<HTMLFrameSetElement > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(HTMLFrameSetElement* impl)
{
    if (!impl)
        return v8::Null();
    return V8HTMLFrameSetElement::wrap(impl);
}

void V8HTMLFrameSetElement::derefObject(void* object)
{
    static_cast<HTMLFrameSetElement*>(object)->deref();
}

} // namespace WebCore
