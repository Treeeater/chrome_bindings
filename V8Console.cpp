/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8Console.h"

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "ScriptCallStack.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8MemoryInfo.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8Console::info = { V8Console::GetTemplate, V8Console::derefObject, 0 };

namespace ConsoleInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> memoryAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Console.memory._get");
    Console* imp = V8Console::toNative(info.Holder());
    RefPtr<MemoryInfo> result = imp->memory();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setHiddenReference(info.Holder(), wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> debugCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Console.debug");
    Console* imp = V8Console::toNative(args.Holder());
    OwnPtr<ScriptCallStack> callStack(ScriptCallStack::create(args, 0));
    if (!callStack)
        return v8::Undefined();
    imp->debug(callStack.get());
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> errorCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Console.error");
    Console* imp = V8Console::toNative(args.Holder());
    OwnPtr<ScriptCallStack> callStack(ScriptCallStack::create(args, 0));
    if (!callStack)
        return v8::Undefined();
    imp->error(callStack.get());
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> infoCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Console.info");
    Console* imp = V8Console::toNative(args.Holder());
    OwnPtr<ScriptCallStack> callStack(ScriptCallStack::create(args, 0));
    if (!callStack)
        return v8::Undefined();
    imp->info(callStack.get());
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> logCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Console.log");
    Console* imp = V8Console::toNative(args.Holder());
    OwnPtr<ScriptCallStack> callStack(ScriptCallStack::create(args, 0));
    if (!callStack)
        return v8::Undefined();
    imp->log(callStack.get());
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> warnCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Console.warn");
    Console* imp = V8Console::toNative(args.Holder());
    OwnPtr<ScriptCallStack> callStack(ScriptCallStack::create(args, 0));
    if (!callStack)
        return v8::Undefined();
    imp->warn(callStack.get());
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> dirCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Console.dir");
    Console* imp = V8Console::toNative(args.Holder());
    OwnPtr<ScriptCallStack> callStack(ScriptCallStack::create(args, 0));
    if (!callStack)
        return v8::Undefined();
    imp->dir(callStack.get());
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> dirxmlCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Console.dirxml");
    Console* imp = V8Console::toNative(args.Holder());
    OwnPtr<ScriptCallStack> callStack(ScriptCallStack::create(args, 0));
    if (!callStack)
        return v8::Undefined();
    imp->dirxml(callStack.get());
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> countCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Console.count");
    Console* imp = V8Console::toNative(args.Holder());
    OwnPtr<ScriptCallStack> callStack(ScriptCallStack::create(args, 0));
    if (!callStack)
        return v8::Undefined();
    imp->count(callStack.get());
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> markTimelineCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Console.markTimeline");
    Console* imp = V8Console::toNative(args.Holder());
    OwnPtr<ScriptCallStack> callStack(ScriptCallStack::create(args, 0));
    if (!callStack)
        return v8::Undefined();
    imp->markTimeline(callStack.get());
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> profileCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Console.profile");
    Console* imp = V8Console::toNative(args.Holder());
    OwnPtr<ScriptCallStack> callStack(ScriptCallStack::create(args, 1));
    if (!callStack)
        return v8::Undefined();
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithUndefinedOrNullCheck>, title, args[0]);
    imp->profile(title, callStack.get());
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> profileEndCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Console.profileEnd");
    Console* imp = V8Console::toNative(args.Holder());
    OwnPtr<ScriptCallStack> callStack(ScriptCallStack::create(args, 1));
    if (!callStack)
        return v8::Undefined();
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithUndefinedOrNullCheck>, title, args[0]);
    imp->profileEnd(title, callStack.get());
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> timeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Console.time");
    Console* imp = V8Console::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithUndefinedOrNullCheck>, title, args[0]);
    imp->time(title);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> timeEndCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Console.timeEnd");
    Console* imp = V8Console::toNative(args.Holder());
    OwnPtr<ScriptCallStack> callStack(ScriptCallStack::create(args, 1));
    if (!callStack)
        return v8::Undefined();
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithUndefinedOrNullCheck>, title, args[0]);
    imp->timeEnd(title, callStack.get());
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> groupCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Console.group");
    Console* imp = V8Console::toNative(args.Holder());
    OwnPtr<ScriptCallStack> callStack(ScriptCallStack::create(args, 0));
    if (!callStack)
        return v8::Undefined();
    imp->group(callStack.get());
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> groupCollapsedCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Console.groupCollapsed");
    Console* imp = V8Console::toNative(args.Holder());
    OwnPtr<ScriptCallStack> callStack(ScriptCallStack::create(args, 0));
    if (!callStack)
        return v8::Undefined();
    imp->groupCollapsed(callStack.get());
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> groupEndCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Console.groupEnd");
    Console* imp = V8Console::toNative(args.Holder());
    imp->groupEnd();
    return v8::Handle<v8::Value>();
}

} // namespace ConsoleInternal

static const BatchedAttribute ConsoleAttrs[] = {
    // Attribute 'profiles' (Type: 'readonly attribute' ExtAttr: 'CustomGetter')
    {"profiles", V8Console::profilesAccessorGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'memory' (Type: 'readonly attribute' ExtAttr: '')
    {"memory", ConsoleInternal::memoryAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static const BatchedCallback ConsoleCallbacks[] = {
    {"debug", ConsoleInternal::debugCallback},
    {"error", ConsoleInternal::errorCallback},
    {"info", ConsoleInternal::infoCallback},
    {"log", ConsoleInternal::logCallback},
    {"warn", ConsoleInternal::warnCallback},
    {"dir", ConsoleInternal::dirCallback},
    {"dirxml", ConsoleInternal::dirxmlCallback},
    {"trace", V8Console::traceCallback},
    {"assert", V8Console::assertCallback},
    {"count", ConsoleInternal::countCallback},
    {"markTimeline", ConsoleInternal::markTimelineCallback},
    {"profile", ConsoleInternal::profileCallback},
    {"profileEnd", ConsoleInternal::profileEndCallback},
    {"time", ConsoleInternal::timeCallback},
    {"timeEnd", ConsoleInternal::timeEndCallback},
    {"group", ConsoleInternal::groupCallback},
    {"groupCollapsed", ConsoleInternal::groupCollapsedCallback},
    {"groupEnd", ConsoleInternal::groupEndCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8ConsoleTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "Console", v8::Persistent<v8::FunctionTemplate>(), V8Console::internalFieldCount,
        ConsoleAttrs, sizeof(ConsoleAttrs) / sizeof(*ConsoleAttrs),
        ConsoleCallbacks, sizeof(ConsoleCallbacks) / sizeof(*ConsoleCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8Console::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8ConsoleRawCache = createRawTemplate();
    return V8ConsoleRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8Console::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8ConsoleCache = ConfigureV8ConsoleTemplate(GetRawTemplate());
    return V8ConsoleCache;
}

Console* V8Console::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<Console*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8Console::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8Console::wrap(Console* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMObjectMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<Console > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(Console* impl)
{
    if (!impl)
        return v8::Null();
    return V8Console::wrap(impl);
}

void V8Console::derefObject(void* object)
{
    static_cast<Console*>(object)->deref();
}

} // namespace WebCore
