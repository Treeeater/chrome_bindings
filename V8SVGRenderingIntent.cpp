/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8SVGRenderingIntent.h"

#if ENABLE(SVG)

#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8SVGRenderingIntent::info = { V8SVGRenderingIntent::GetTemplate, V8SVGRenderingIntent::derefObject, 0 };

namespace SVGRenderingIntentInternal {

template <typename T> void V8_USE(T) { }

} // namespace SVGRenderingIntentInternal

static const BatchedConstant SVGRenderingIntentConsts[] = {
    {"RENDERING_INTENT_UNKNOWN", static_cast<signed int>(0)},
    {"RENDERING_INTENT_AUTO", static_cast<signed int>(1)},
    {"RENDERING_INTENT_PERCEPTUAL", static_cast<signed int>(2)},
    {"RENDERING_INTENT_RELATIVE_COLORIMETRIC", static_cast<signed int>(3)},
    {"RENDERING_INTENT_SATURATION", static_cast<signed int>(4)},
    {"RENDERING_INTENT_ABSOLUTE_COLORIMETRIC", static_cast<signed int>(5)},
};

COMPILE_ASSERT(0 == SVGRenderingIntent::RENDERING_INTENT_UNKNOWN, SVGRenderingIntentEnumRENDERING_INTENT_UNKNOWNIsWrongUseDontCheckEnums);
COMPILE_ASSERT(1 == SVGRenderingIntent::RENDERING_INTENT_AUTO, SVGRenderingIntentEnumRENDERING_INTENT_AUTOIsWrongUseDontCheckEnums);
COMPILE_ASSERT(2 == SVGRenderingIntent::RENDERING_INTENT_PERCEPTUAL, SVGRenderingIntentEnumRENDERING_INTENT_PERCEPTUALIsWrongUseDontCheckEnums);
COMPILE_ASSERT(3 == SVGRenderingIntent::RENDERING_INTENT_RELATIVE_COLORIMETRIC, SVGRenderingIntentEnumRENDERING_INTENT_RELATIVE_COLORIMETRICIsWrongUseDontCheckEnums);
COMPILE_ASSERT(4 == SVGRenderingIntent::RENDERING_INTENT_SATURATION, SVGRenderingIntentEnumRENDERING_INTENT_SATURATIONIsWrongUseDontCheckEnums);
COMPILE_ASSERT(5 == SVGRenderingIntent::RENDERING_INTENT_ABSOLUTE_COLORIMETRIC, SVGRenderingIntentEnumRENDERING_INTENT_ABSOLUTE_COLORIMETRICIsWrongUseDontCheckEnums);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8SVGRenderingIntentTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "SVGRenderingIntent", v8::Persistent<v8::FunctionTemplate>(), V8SVGRenderingIntent::internalFieldCount,
        0, 0,
        0, 0);
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    
    batchConfigureConstants(desc, proto, SVGRenderingIntentConsts, sizeof(SVGRenderingIntentConsts) / sizeof(*SVGRenderingIntentConsts));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8SVGRenderingIntent::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8SVGRenderingIntentRawCache = createRawTemplate();
    return V8SVGRenderingIntentRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8SVGRenderingIntent::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8SVGRenderingIntentCache = ConfigureV8SVGRenderingIntentTemplate(GetRawTemplate());
    return V8SVGRenderingIntentCache;
}

SVGRenderingIntent* V8SVGRenderingIntent::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<SVGRenderingIntent*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8SVGRenderingIntent::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8SVGRenderingIntent::wrap(SVGRenderingIntent* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMSVGObjectWithContextMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMSVGObjectWithContextMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<SVGRenderingIntent > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(SVGRenderingIntent* impl)
{
    if (!impl)
        return v8::Null();
    return V8SVGRenderingIntent::wrap(impl);
}

void V8SVGRenderingIntent::derefObject(void* object)
{
    static_cast<SVGRenderingIntent*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(SVG)
