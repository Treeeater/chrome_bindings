/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8SVGException.h"

#if ENABLE(SVG)

#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8SVGException::info = { V8SVGException::GetTemplate, V8SVGException::derefObject, 0 };

namespace SVGExceptionInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> codeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGException.code._get");
    SVGException* imp = V8SVGException::toNative(info.Holder());
    return v8::Integer::New(imp->code());
}

static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGException.name._get");
    SVGException* imp = V8SVGException::toNative(info.Holder());
    return v8String(imp->name());
}

static v8::Handle<v8::Value> messageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGException.message._get");
    SVGException* imp = V8SVGException::toNative(info.Holder());
    return v8String(imp->message());
}

static v8::Handle<v8::Value> toStringCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGException.toString");
    SVGException* imp = V8SVGException::toNative(args.Holder());
    return v8String(imp->toString());
}

} // namespace SVGExceptionInternal

static const BatchedAttribute SVGExceptionAttrs[] = {
    // Attribute 'code' (Type: 'readonly attribute' ExtAttr: '')
    {"code", SVGExceptionInternal::codeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'name' (Type: 'readonly attribute' ExtAttr: '')
    {"name", SVGExceptionInternal::nameAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'message' (Type: 'readonly attribute' ExtAttr: '')
    {"message", SVGExceptionInternal::messageAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static const BatchedConstant SVGExceptionConsts[] = {
    {"SVG_WRONG_TYPE_ERR", static_cast<signed int>(0)},
    {"SVG_INVALID_VALUE_ERR", static_cast<signed int>(1)},
    {"SVG_MATRIX_NOT_INVERTABLE", static_cast<signed int>(2)},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8SVGExceptionTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "SVGException", v8::Persistent<v8::FunctionTemplate>(), V8SVGException::internalFieldCount,
        SVGExceptionAttrs, sizeof(SVGExceptionAttrs) / sizeof(*SVGExceptionAttrs),
        0, 0);
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    
    proto->Set(v8::String::New("toString"), v8::FunctionTemplate::New(SVGExceptionInternal::toStringCallback, v8::Handle<v8::Value>(), defaultSignature), static_cast<v8::PropertyAttribute>(v8::DontDelete | v8::DontEnum));
    batchConfigureConstants(desc, proto, SVGExceptionConsts, sizeof(SVGExceptionConsts) / sizeof(*SVGExceptionConsts));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8SVGException::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8SVGExceptionRawCache = createRawTemplate();
    return V8SVGExceptionRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8SVGException::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8SVGExceptionCache = ConfigureV8SVGExceptionTemplate(GetRawTemplate());
    return V8SVGExceptionCache;
}

SVGException* V8SVGException::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<SVGException*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8SVGException::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8SVGException::wrap(SVGException* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMSVGObjectWithContextMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMSVGObjectWithContextMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<SVGException > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(SVGException* impl)
{
    if (!impl)
        return v8::Null();
    return V8SVGException::wrap(impl);
}

void V8SVGException::derefObject(void* object)
{
    static_cast<SVGException*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(SVG)
