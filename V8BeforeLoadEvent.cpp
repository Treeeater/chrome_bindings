/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8BeforeLoadEvent.h"

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8Event.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8BeforeLoadEvent::info = { V8BeforeLoadEvent::GetTemplate, V8BeforeLoadEvent::derefObject, 0 };

namespace BeforeLoadEventInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> urlAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.BeforeLoadEvent.url._get");
    BeforeLoadEvent* imp = V8BeforeLoadEvent::toNative(info.Holder());
    return v8String(imp->url());
}

static v8::Handle<v8::Value> initBeforeLoadEventCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.BeforeLoadEvent.initBeforeLoadEvent");
    BeforeLoadEvent* imp = V8BeforeLoadEvent::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, type, args[0]);
    EXCEPTION_BLOCK(bool, canBubble, args[1]->BooleanValue());
    EXCEPTION_BLOCK(bool, cancelable, args[2]->BooleanValue());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, url, args[3]);
    imp->initBeforeLoadEvent(type, canBubble, cancelable, url);
    return v8::Handle<v8::Value>();
}

} // namespace BeforeLoadEventInternal

static const BatchedAttribute BeforeLoadEventAttrs[] = {
    // Attribute 'url' (Type: 'readonly attribute' ExtAttr: '')
    {"url", BeforeLoadEventInternal::urlAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static const BatchedCallback BeforeLoadEventCallbacks[] = {
    {"initBeforeLoadEvent", BeforeLoadEventInternal::initBeforeLoadEventCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8BeforeLoadEventTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "BeforeLoadEvent", V8Event::GetTemplate(), V8BeforeLoadEvent::internalFieldCount,
        BeforeLoadEventAttrs, sizeof(BeforeLoadEventAttrs) / sizeof(*BeforeLoadEventAttrs),
        BeforeLoadEventCallbacks, sizeof(BeforeLoadEventCallbacks) / sizeof(*BeforeLoadEventCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8BeforeLoadEvent::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8BeforeLoadEventRawCache = createRawTemplate();
    return V8BeforeLoadEventRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8BeforeLoadEvent::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8BeforeLoadEventCache = ConfigureV8BeforeLoadEventTemplate(GetRawTemplate());
    return V8BeforeLoadEventCache;
}

BeforeLoadEvent* V8BeforeLoadEvent::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<BeforeLoadEvent*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8BeforeLoadEvent::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8BeforeLoadEvent::wrap(BeforeLoadEvent* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMObjectMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<BeforeLoadEvent > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(BeforeLoadEvent* impl)
{
    if (!impl)
        return v8::Null();
    return V8BeforeLoadEvent::wrap(impl);
}

void V8BeforeLoadEvent::derefObject(void* object)
{
    static_cast<BeforeLoadEvent*>(object)->deref();
}

} // namespace WebCore
