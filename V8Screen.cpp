/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8Screen.h"

#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8Screen::info = { V8Screen::GetTemplate, V8Screen::derefObject, 0 };

namespace ScreenInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> heightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Screen.height._get");
    Screen* imp = V8Screen::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->height());
}

static v8::Handle<v8::Value> widthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Screen.width._get");
    Screen* imp = V8Screen::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->width());
}

static v8::Handle<v8::Value> colorDepthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Screen.colorDepth._get");
    Screen* imp = V8Screen::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->colorDepth());
}

static v8::Handle<v8::Value> pixelDepthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Screen.pixelDepth._get");
    Screen* imp = V8Screen::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->pixelDepth());
}

static v8::Handle<v8::Value> availLeftAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Screen.availLeft._get");
    Screen* imp = V8Screen::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->availLeft());
}

static v8::Handle<v8::Value> availTopAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Screen.availTop._get");
    Screen* imp = V8Screen::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->availTop());
}

static v8::Handle<v8::Value> availHeightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Screen.availHeight._get");
    Screen* imp = V8Screen::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->availHeight());
}

static v8::Handle<v8::Value> availWidthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Screen.availWidth._get");
    Screen* imp = V8Screen::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->availWidth());
}

} // namespace ScreenInternal

static const BatchedAttribute ScreenAttrs[] = {
    // Attribute 'height' (Type: 'readonly attribute' ExtAttr: '')
    {"height", ScreenInternal::heightAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'width' (Type: 'readonly attribute' ExtAttr: '')
    {"width", ScreenInternal::widthAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'colorDepth' (Type: 'readonly attribute' ExtAttr: '')
    {"colorDepth", ScreenInternal::colorDepthAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'pixelDepth' (Type: 'readonly attribute' ExtAttr: '')
    {"pixelDepth", ScreenInternal::pixelDepthAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'availLeft' (Type: 'readonly attribute' ExtAttr: '')
    {"availLeft", ScreenInternal::availLeftAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'availTop' (Type: 'readonly attribute' ExtAttr: '')
    {"availTop", ScreenInternal::availTopAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'availHeight' (Type: 'readonly attribute' ExtAttr: '')
    {"availHeight", ScreenInternal::availHeightAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'availWidth' (Type: 'readonly attribute' ExtAttr: '')
    {"availWidth", ScreenInternal::availWidthAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8ScreenTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "Screen", v8::Persistent<v8::FunctionTemplate>(), V8Screen::internalFieldCount,
        ScreenAttrs, sizeof(ScreenAttrs) / sizeof(*ScreenAttrs),
        0, 0);
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8Screen::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8ScreenRawCache = createRawTemplate();
    return V8ScreenRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8Screen::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8ScreenCache = ConfigureV8ScreenTemplate(GetRawTemplate());
    return V8ScreenCache;
}

Screen* V8Screen::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<Screen*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8Screen::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8Screen::wrap(Screen* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMObjectMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<Screen > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(Screen* impl)
{
    if (!impl)
        return v8::Null();
    return V8Screen::wrap(impl);
}

void V8Screen::derefObject(void* object)
{
    static_cast<Screen*>(object)->deref();
}

} // namespace WebCore
