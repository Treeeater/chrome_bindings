/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8SVGFEDisplacementMapElement.h"

#if ENABLE(SVG) && ENABLE(FILTERS)

#include "CSSMutableStyleDeclaration.h"
#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8CSSStyleDeclaration.h"
#include "V8CSSValue.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include "V8SVGAnimatedEnumeration.h"
#include "V8SVGAnimatedLength.h"
#include "V8SVGAnimatedNumber.h"
#include "V8SVGAnimatedString.h"
#include "V8SVGElement.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

namespace WebCore {

WrapperTypeInfo V8SVGFEDisplacementMapElement::info = { V8SVGFEDisplacementMapElement::GetTemplate, V8SVGFEDisplacementMapElement::derefObject, 0 };

namespace SVGFEDisplacementMapElementInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> in1AttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGFEDisplacementMapElement.in1._get");
    SVGFEDisplacementMapElement* imp = V8SVGFEDisplacementMapElement::toNative(info.Holder());
    SVGElement* context = imp;
    PassRefPtr<SVGAnimatedString> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->in1Animated(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> in2AttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGFEDisplacementMapElement.in2._get");
    SVGFEDisplacementMapElement* imp = V8SVGFEDisplacementMapElement::toNative(info.Holder());
    SVGElement* context = imp;
    PassRefPtr<SVGAnimatedString> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->in2Animated(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> scaleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGFEDisplacementMapElement.scale._get");
    SVGFEDisplacementMapElement* imp = V8SVGFEDisplacementMapElement::toNative(info.Holder());
    SVGElement* context = imp;
    PassRefPtr<SVGAnimatedNumber> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->scaleAnimated(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> xChannelSelectorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGFEDisplacementMapElement.xChannelSelector._get");
    SVGFEDisplacementMapElement* imp = V8SVGFEDisplacementMapElement::toNative(info.Holder());
    SVGElement* context = imp;
    PassRefPtr<SVGAnimatedEnumeration> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->xChannelSelectorAnimated(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> yChannelSelectorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGFEDisplacementMapElement.yChannelSelector._get");
    SVGFEDisplacementMapElement* imp = V8SVGFEDisplacementMapElement::toNative(info.Holder());
    SVGElement* context = imp;
    PassRefPtr<SVGAnimatedEnumeration> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->yChannelSelectorAnimated(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> xAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGFEDisplacementMapElement.x._get");
    SVGFEDisplacementMapElement* imp = V8SVGFEDisplacementMapElement::toNative(info.Holder());
    SVGElement* context = imp;
    PassRefPtr<SVGAnimatedLength> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->xAnimated(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> yAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGFEDisplacementMapElement.y._get");
    SVGFEDisplacementMapElement* imp = V8SVGFEDisplacementMapElement::toNative(info.Holder());
    SVGElement* context = imp;
    PassRefPtr<SVGAnimatedLength> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->yAnimated(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> widthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGFEDisplacementMapElement.width._get");
    SVGFEDisplacementMapElement* imp = V8SVGFEDisplacementMapElement::toNative(info.Holder());
    SVGElement* context = imp;
    PassRefPtr<SVGAnimatedLength> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->widthAnimated(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> heightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGFEDisplacementMapElement.height._get");
    SVGFEDisplacementMapElement* imp = V8SVGFEDisplacementMapElement::toNative(info.Holder());
    SVGElement* context = imp;
    PassRefPtr<SVGAnimatedLength> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->heightAnimated(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> resultAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGFEDisplacementMapElement.result._get");
    SVGFEDisplacementMapElement* imp = V8SVGFEDisplacementMapElement::toNative(info.Holder());
    SVGElement* context = imp;
    PassRefPtr<SVGAnimatedString> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->resultAnimated(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> classNameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGFEDisplacementMapElement.className._get");
    SVGFEDisplacementMapElement* imp = V8SVGFEDisplacementMapElement::toNative(info.Holder());
    SVGElement* context = imp;
    PassRefPtr<SVGAnimatedString> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->classNameAnimated(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> styleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGFEDisplacementMapElement.style._get");
    SVGFEDisplacementMapElement* imp = V8SVGFEDisplacementMapElement::toNative(info.Holder());
    return toV8(imp->style());
}

static v8::Handle<v8::Value> getPresentationAttributeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGFEDisplacementMapElement.getPresentationAttribute");
    SVGFEDisplacementMapElement* imp = V8SVGFEDisplacementMapElement::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, name, args[0]);
    return toV8(imp->getPresentationAttribute(name));
}

} // namespace SVGFEDisplacementMapElementInternal

static const BatchedAttribute SVGFEDisplacementMapElementAttrs[] = {
    // Attribute 'in1' (Type: 'readonly attribute' ExtAttr: '')
    {"in1", SVGFEDisplacementMapElementInternal::in1AttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'in2' (Type: 'readonly attribute' ExtAttr: '')
    {"in2", SVGFEDisplacementMapElementInternal::in2AttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'scale' (Type: 'readonly attribute' ExtAttr: '')
    {"scale", SVGFEDisplacementMapElementInternal::scaleAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'xChannelSelector' (Type: 'readonly attribute' ExtAttr: '')
    {"xChannelSelector", SVGFEDisplacementMapElementInternal::xChannelSelectorAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'yChannelSelector' (Type: 'readonly attribute' ExtAttr: '')
    {"yChannelSelector", SVGFEDisplacementMapElementInternal::yChannelSelectorAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'x' (Type: 'readonly attribute' ExtAttr: '')
    {"x", SVGFEDisplacementMapElementInternal::xAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'y' (Type: 'readonly attribute' ExtAttr: '')
    {"y", SVGFEDisplacementMapElementInternal::yAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'width' (Type: 'readonly attribute' ExtAttr: '')
    {"width", SVGFEDisplacementMapElementInternal::widthAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'height' (Type: 'readonly attribute' ExtAttr: '')
    {"height", SVGFEDisplacementMapElementInternal::heightAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'result' (Type: 'readonly attribute' ExtAttr: '')
    {"result", SVGFEDisplacementMapElementInternal::resultAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'className' (Type: 'readonly attribute' ExtAttr: '')
    {"className", SVGFEDisplacementMapElementInternal::classNameAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'style' (Type: 'readonly attribute' ExtAttr: '')
    {"style", SVGFEDisplacementMapElementInternal::styleAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static const BatchedCallback SVGFEDisplacementMapElementCallbacks[] = {
    {"getPresentationAttribute", SVGFEDisplacementMapElementInternal::getPresentationAttributeCallback},
};
static const BatchedConstant SVGFEDisplacementMapElementConsts[] = {
    {"SVG_CHANNEL_UNKNOWN", static_cast<signed int>(0)},
    {"SVG_CHANNEL_R", static_cast<signed int>(1)},
    {"SVG_CHANNEL_G", static_cast<signed int>(2)},
    {"SVG_CHANNEL_B", static_cast<signed int>(3)},
    {"SVG_CHANNEL_A", static_cast<signed int>(4)},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8SVGFEDisplacementMapElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "SVGFEDisplacementMapElement", V8SVGElement::GetTemplate(), V8SVGFEDisplacementMapElement::internalFieldCount,
        SVGFEDisplacementMapElementAttrs, sizeof(SVGFEDisplacementMapElementAttrs) / sizeof(*SVGFEDisplacementMapElementAttrs),
        SVGFEDisplacementMapElementCallbacks, sizeof(SVGFEDisplacementMapElementCallbacks) / sizeof(*SVGFEDisplacementMapElementCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    
    batchConfigureConstants(desc, proto, SVGFEDisplacementMapElementConsts, sizeof(SVGFEDisplacementMapElementConsts) / sizeof(*SVGFEDisplacementMapElementConsts));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8SVGFEDisplacementMapElement::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8SVGFEDisplacementMapElementRawCache = createRawTemplate();
    return V8SVGFEDisplacementMapElementRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8SVGFEDisplacementMapElement::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8SVGFEDisplacementMapElementCache = ConfigureV8SVGFEDisplacementMapElementTemplate(GetRawTemplate());
    return V8SVGFEDisplacementMapElementCache;
}

SVGFEDisplacementMapElement* V8SVGFEDisplacementMapElement::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<SVGFEDisplacementMapElement*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8SVGFEDisplacementMapElement::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8SVGFEDisplacementMapElement::wrap(SVGFEDisplacementMapElement* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    if (impl->document()) {
        proxy = V8Proxy::retrieve(impl->document()->frame());
        if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl))
            proxy->windowShell()->initContextIfNeeded();
    }

        wrapper = V8DOMWrapper::getWrapper(impl);
        if (!wrapper.IsEmpty())
            return wrapper;

    v8::Handle<v8::Context> context;
    if (proxy)
        context = proxy->context();

    // Enter the node's context and create the wrapper in that context.
    if (!context.IsEmpty())
        context->Enter();
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    // Exit the node's context if it was entered.
    if (!context.IsEmpty())
        context->Exit();
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMNodeMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<SVGFEDisplacementMapElement > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(SVGFEDisplacementMapElement* impl)
{
    if (!impl)
        return v8::Null();
    return V8SVGFEDisplacementMapElement::wrap(impl);
}

void V8SVGFEDisplacementMapElement::derefObject(void* object)
{
    static_cast<SVGFEDisplacementMapElement*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(SVG) && ENABLE(FILTERS)
