/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8SVGAngle.h"

#if ENABLE(SVG)

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include "V8SVGPODTypeWrapper.h"

namespace WebCore {

WrapperTypeInfo V8SVGAngle::info = { V8SVGAngle::GetTemplate, V8SVGAngle::derefObject, 0 };

namespace SVGAngleInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> unitTypeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGAngle.unitType._get");
    V8SVGPODTypeWrapper<SVGAngle>* impWrapper = V8SVGPODTypeWrapper<SVGAngle>::toNative(info.Holder());
    SVGAngle impInstance = *impWrapper;
    SVGAngle* imp = &impInstance;
    return v8::Integer::New(imp->unitType());
}

static v8::Handle<v8::Value> valueAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGAngle.value._get");
    V8SVGPODTypeWrapper<SVGAngle>* impWrapper = V8SVGPODTypeWrapper<SVGAngle>::toNative(info.Holder());
    SVGAngle impInstance = *impWrapper;
    SVGAngle* imp = &impInstance;
    return v8::Number::New(imp->value());
}

static void valueAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGAngle.value._set");
    V8SVGPODTypeWrapper<SVGAngle>* wrapper = V8SVGPODTypeWrapper<SVGAngle>::toNative(info.Holder());
    SVGAngle impInstance = *wrapper;
    SVGAngle* imp = &impInstance;
    float v = static_cast<float>(value->NumberValue());
    imp->setValue(v);
    wrapper->commitChange(*imp, V8Proxy::svgContext(wrapper));
    return;
}

static v8::Handle<v8::Value> valueInSpecifiedUnitsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGAngle.valueInSpecifiedUnits._get");
    V8SVGPODTypeWrapper<SVGAngle>* impWrapper = V8SVGPODTypeWrapper<SVGAngle>::toNative(info.Holder());
    SVGAngle impInstance = *impWrapper;
    SVGAngle* imp = &impInstance;
    return v8::Number::New(imp->valueInSpecifiedUnits());
}

static void valueInSpecifiedUnitsAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGAngle.valueInSpecifiedUnits._set");
    V8SVGPODTypeWrapper<SVGAngle>* wrapper = V8SVGPODTypeWrapper<SVGAngle>::toNative(info.Holder());
    SVGAngle impInstance = *wrapper;
    SVGAngle* imp = &impInstance;
    float v = static_cast<float>(value->NumberValue());
    imp->setValueInSpecifiedUnits(v);
    wrapper->commitChange(*imp, V8Proxy::svgContext(wrapper));
    return;
}

static v8::Handle<v8::Value> valueAsStringAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGAngle.valueAsString._get");
    V8SVGPODTypeWrapper<SVGAngle>* impWrapper = V8SVGPODTypeWrapper<SVGAngle>::toNative(info.Holder());
    SVGAngle impInstance = *impWrapper;
    SVGAngle* imp = &impInstance;
    return v8String(imp->valueAsString());
}

static void valueAsStringAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGAngle.valueAsString._set");
    V8SVGPODTypeWrapper<SVGAngle>* wrapper = V8SVGPODTypeWrapper<SVGAngle>::toNative(info.Holder());
    SVGAngle impInstance = *wrapper;
    SVGAngle* imp = &impInstance;
    V8Parameter<WithNullCheck> v = value;
    imp->setValueAsString(v);
    wrapper->commitChange(*imp, V8Proxy::svgContext(wrapper));
    return;
}

static v8::Handle<v8::Value> newValueSpecifiedUnitsCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGAngle.newValueSpecifiedUnits");
    V8SVGPODTypeWrapper<SVGAngle>* impWrapper = V8SVGPODTypeWrapper<SVGAngle>::toNative(args.Holder());
    SVGAngle impInstance = *impWrapper;
    SVGAngle* imp = &impInstance;
    EXCEPTION_BLOCK(int, unitType, toUInt32(args[0]));
    EXCEPTION_BLOCK(float, valueInSpecifiedUnits, static_cast<float>(args[1]->NumberValue()));
    imp->newValueSpecifiedUnits(unitType, valueInSpecifiedUnits);
    SVGElement* context = V8Proxy::svgContext(impWrapper);
    impWrapper->commitChange(impInstance, context);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> convertToSpecifiedUnitsCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGAngle.convertToSpecifiedUnits");
    V8SVGPODTypeWrapper<SVGAngle>* impWrapper = V8SVGPODTypeWrapper<SVGAngle>::toNative(args.Holder());
    SVGAngle impInstance = *impWrapper;
    SVGAngle* imp = &impInstance;
    EXCEPTION_BLOCK(int, unitType, toUInt32(args[0]));
    imp->convertToSpecifiedUnits(unitType);
    SVGElement* context = V8Proxy::svgContext(impWrapper);
    impWrapper->commitChange(impInstance, context);
    return v8::Handle<v8::Value>();
}

} // namespace SVGAngleInternal

static const BatchedAttribute SVGAngleAttrs[] = {
    // Attribute 'unitType' (Type: 'readonly attribute' ExtAttr: '')
    {"unitType", SVGAngleInternal::unitTypeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'value' (Type: 'attribute' ExtAttr: '')
    {"value", SVGAngleInternal::valueAttrGetter, SVGAngleInternal::valueAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'valueInSpecifiedUnits' (Type: 'attribute' ExtAttr: '')
    {"valueInSpecifiedUnits", SVGAngleInternal::valueInSpecifiedUnitsAttrGetter, SVGAngleInternal::valueInSpecifiedUnitsAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'valueAsString' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
    {"valueAsString", SVGAngleInternal::valueAsStringAttrGetter, SVGAngleInternal::valueAsStringAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static const BatchedCallback SVGAngleCallbacks[] = {
    {"newValueSpecifiedUnits", SVGAngleInternal::newValueSpecifiedUnitsCallback},
    {"convertToSpecifiedUnits", SVGAngleInternal::convertToSpecifiedUnitsCallback},
};
static const BatchedConstant SVGAngleConsts[] = {
    {"SVG_ANGLETYPE_UNKNOWN", static_cast<signed int>(0)},
    {"SVG_ANGLETYPE_UNSPECIFIED", static_cast<signed int>(1)},
    {"SVG_ANGLETYPE_DEG", static_cast<signed int>(2)},
    {"SVG_ANGLETYPE_RAD", static_cast<signed int>(3)},
    {"SVG_ANGLETYPE_GRAD", static_cast<signed int>(4)},
};

COMPILE_ASSERT(0 == SVGAngle::SVG_ANGLETYPE_UNKNOWN, SVGAngleEnumSVG_ANGLETYPE_UNKNOWNIsWrongUseDontCheckEnums);
COMPILE_ASSERT(1 == SVGAngle::SVG_ANGLETYPE_UNSPECIFIED, SVGAngleEnumSVG_ANGLETYPE_UNSPECIFIEDIsWrongUseDontCheckEnums);
COMPILE_ASSERT(2 == SVGAngle::SVG_ANGLETYPE_DEG, SVGAngleEnumSVG_ANGLETYPE_DEGIsWrongUseDontCheckEnums);
COMPILE_ASSERT(3 == SVGAngle::SVG_ANGLETYPE_RAD, SVGAngleEnumSVG_ANGLETYPE_RADIsWrongUseDontCheckEnums);
COMPILE_ASSERT(4 == SVGAngle::SVG_ANGLETYPE_GRAD, SVGAngleEnumSVG_ANGLETYPE_GRADIsWrongUseDontCheckEnums);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8SVGAngleTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "SVGAngle", v8::Persistent<v8::FunctionTemplate>(), V8SVGAngle::internalFieldCount,
        SVGAngleAttrs, sizeof(SVGAngleAttrs) / sizeof(*SVGAngleAttrs),
        SVGAngleCallbacks, sizeof(SVGAngleCallbacks) / sizeof(*SVGAngleCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    
    batchConfigureConstants(desc, proto, SVGAngleConsts, sizeof(SVGAngleConsts) / sizeof(*SVGAngleConsts));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8SVGAngle::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8SVGAngleRawCache = createRawTemplate();
    return V8SVGAngleRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8SVGAngle::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8SVGAngleCache = ConfigureV8SVGAngleTemplate(GetRawTemplate());
    return V8SVGAngleCache;
}

V8SVGPODTypeWrapper<SVGAngle>* V8SVGAngle::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<V8SVGPODTypeWrapper<SVGAngle>*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8SVGAngle::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8SVGAngle::wrap(V8SVGPODTypeWrapper<SVGAngle>* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMSVGObjectWithContextMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMSVGObjectWithContextMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<V8SVGPODTypeWrapper<SVGAngle> > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(V8SVGPODTypeWrapper<SVGAngle>* impl)
{
    if (!impl)
        return v8::Null();
    return V8SVGAngle::wrap(impl);
}

void V8SVGAngle::derefObject(void* object)
{
    static_cast<V8SVGPODTypeWrapper<SVGAngle>*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(SVG)
