/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8SVGFESpecularLightingElement.h"

#if ENABLE(SVG) && ENABLE(FILTERS)

#include "CSSMutableStyleDeclaration.h"
#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8CSSStyleDeclaration.h"
#include "V8CSSValue.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include "V8SVGAnimatedLength.h"
#include "V8SVGAnimatedNumber.h"
#include "V8SVGAnimatedString.h"
#include "V8SVGElement.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

namespace WebCore {

WrapperTypeInfo V8SVGFESpecularLightingElement::info = { V8SVGFESpecularLightingElement::GetTemplate, V8SVGFESpecularLightingElement::derefObject, 0 };

namespace SVGFESpecularLightingElementInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> in1AttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGFESpecularLightingElement.in1._get");
    SVGFESpecularLightingElement* imp = V8SVGFESpecularLightingElement::toNative(info.Holder());
    SVGElement* context = imp;
    PassRefPtr<SVGAnimatedString> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->in1Animated(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> surfaceScaleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGFESpecularLightingElement.surfaceScale._get");
    SVGFESpecularLightingElement* imp = V8SVGFESpecularLightingElement::toNative(info.Holder());
    SVGElement* context = imp;
    PassRefPtr<SVGAnimatedNumber> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->surfaceScaleAnimated(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> specularConstantAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGFESpecularLightingElement.specularConstant._get");
    SVGFESpecularLightingElement* imp = V8SVGFESpecularLightingElement::toNative(info.Holder());
    SVGElement* context = imp;
    PassRefPtr<SVGAnimatedNumber> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->specularConstantAnimated(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> specularExponentAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGFESpecularLightingElement.specularExponent._get");
    SVGFESpecularLightingElement* imp = V8SVGFESpecularLightingElement::toNative(info.Holder());
    SVGElement* context = imp;
    PassRefPtr<SVGAnimatedNumber> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->specularExponentAnimated(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> xAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGFESpecularLightingElement.x._get");
    SVGFESpecularLightingElement* imp = V8SVGFESpecularLightingElement::toNative(info.Holder());
    SVGElement* context = imp;
    PassRefPtr<SVGAnimatedLength> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->xAnimated(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> yAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGFESpecularLightingElement.y._get");
    SVGFESpecularLightingElement* imp = V8SVGFESpecularLightingElement::toNative(info.Holder());
    SVGElement* context = imp;
    PassRefPtr<SVGAnimatedLength> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->yAnimated(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> widthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGFESpecularLightingElement.width._get");
    SVGFESpecularLightingElement* imp = V8SVGFESpecularLightingElement::toNative(info.Holder());
    SVGElement* context = imp;
    PassRefPtr<SVGAnimatedLength> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->widthAnimated(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> heightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGFESpecularLightingElement.height._get");
    SVGFESpecularLightingElement* imp = V8SVGFESpecularLightingElement::toNative(info.Holder());
    SVGElement* context = imp;
    PassRefPtr<SVGAnimatedLength> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->heightAnimated(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> resultAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGFESpecularLightingElement.result._get");
    SVGFESpecularLightingElement* imp = V8SVGFESpecularLightingElement::toNative(info.Holder());
    SVGElement* context = imp;
    PassRefPtr<SVGAnimatedString> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->resultAnimated(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> classNameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGFESpecularLightingElement.className._get");
    SVGFESpecularLightingElement* imp = V8SVGFESpecularLightingElement::toNative(info.Holder());
    SVGElement* context = imp;
    PassRefPtr<SVGAnimatedString> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->classNameAnimated(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> styleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGFESpecularLightingElement.style._get");
    SVGFESpecularLightingElement* imp = V8SVGFESpecularLightingElement::toNative(info.Holder());
    return toV8(imp->style());
}

static v8::Handle<v8::Value> getPresentationAttributeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGFESpecularLightingElement.getPresentationAttribute");
    SVGFESpecularLightingElement* imp = V8SVGFESpecularLightingElement::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, name, args[0]);
    return toV8(imp->getPresentationAttribute(name));
}

} // namespace SVGFESpecularLightingElementInternal

static const BatchedAttribute SVGFESpecularLightingElementAttrs[] = {
    // Attribute 'in1' (Type: 'readonly attribute' ExtAttr: '')
    {"in1", SVGFESpecularLightingElementInternal::in1AttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'surfaceScale' (Type: 'readonly attribute' ExtAttr: '')
    {"surfaceScale", SVGFESpecularLightingElementInternal::surfaceScaleAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'specularConstant' (Type: 'readonly attribute' ExtAttr: '')
    {"specularConstant", SVGFESpecularLightingElementInternal::specularConstantAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'specularExponent' (Type: 'readonly attribute' ExtAttr: '')
    {"specularExponent", SVGFESpecularLightingElementInternal::specularExponentAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'x' (Type: 'readonly attribute' ExtAttr: '')
    {"x", SVGFESpecularLightingElementInternal::xAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'y' (Type: 'readonly attribute' ExtAttr: '')
    {"y", SVGFESpecularLightingElementInternal::yAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'width' (Type: 'readonly attribute' ExtAttr: '')
    {"width", SVGFESpecularLightingElementInternal::widthAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'height' (Type: 'readonly attribute' ExtAttr: '')
    {"height", SVGFESpecularLightingElementInternal::heightAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'result' (Type: 'readonly attribute' ExtAttr: '')
    {"result", SVGFESpecularLightingElementInternal::resultAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'className' (Type: 'readonly attribute' ExtAttr: '')
    {"className", SVGFESpecularLightingElementInternal::classNameAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'style' (Type: 'readonly attribute' ExtAttr: '')
    {"style", SVGFESpecularLightingElementInternal::styleAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static const BatchedCallback SVGFESpecularLightingElementCallbacks[] = {
    {"getPresentationAttribute", SVGFESpecularLightingElementInternal::getPresentationAttributeCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8SVGFESpecularLightingElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "SVGFESpecularLightingElement", V8SVGElement::GetTemplate(), V8SVGFESpecularLightingElement::internalFieldCount,
        SVGFESpecularLightingElementAttrs, sizeof(SVGFESpecularLightingElementAttrs) / sizeof(*SVGFESpecularLightingElementAttrs),
        SVGFESpecularLightingElementCallbacks, sizeof(SVGFESpecularLightingElementCallbacks) / sizeof(*SVGFESpecularLightingElementCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8SVGFESpecularLightingElement::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8SVGFESpecularLightingElementRawCache = createRawTemplate();
    return V8SVGFESpecularLightingElementRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8SVGFESpecularLightingElement::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8SVGFESpecularLightingElementCache = ConfigureV8SVGFESpecularLightingElementTemplate(GetRawTemplate());
    return V8SVGFESpecularLightingElementCache;
}

SVGFESpecularLightingElement* V8SVGFESpecularLightingElement::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<SVGFESpecularLightingElement*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8SVGFESpecularLightingElement::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8SVGFESpecularLightingElement::wrap(SVGFESpecularLightingElement* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    if (impl->document()) {
        proxy = V8Proxy::retrieve(impl->document()->frame());
        if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl))
            proxy->windowShell()->initContextIfNeeded();
    }

        wrapper = V8DOMWrapper::getWrapper(impl);
        if (!wrapper.IsEmpty())
            return wrapper;

    v8::Handle<v8::Context> context;
    if (proxy)
        context = proxy->context();

    // Enter the node's context and create the wrapper in that context.
    if (!context.IsEmpty())
        context->Enter();
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    // Exit the node's context if it was entered.
    if (!context.IsEmpty())
        context->Exit();
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMNodeMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<SVGFESpecularLightingElement > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(SVGFESpecularLightingElement* impl)
{
    if (!impl)
        return v8::Null();
    return V8SVGFESpecularLightingElement::wrap(impl);
}

void V8SVGFESpecularLightingElement::derefObject(void* object)
{
    static_cast<SVGFESpecularLightingElement*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(SVG) && ENABLE(FILTERS)
