/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8OverflowEvent.h"

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8Event.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8OverflowEvent::info = { V8OverflowEvent::GetTemplate, V8OverflowEvent::derefObject, 0 };

namespace OverflowEventInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> orientAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.OverflowEvent.orient._get");
    OverflowEvent* imp = V8OverflowEvent::toNative(info.Holder());
    return v8::Integer::New(imp->orient());
}

static v8::Handle<v8::Value> horizontalOverflowAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.OverflowEvent.horizontalOverflow._get");
    OverflowEvent* imp = V8OverflowEvent::toNative(info.Holder());
    return v8Boolean(imp->horizontalOverflow());
}

static v8::Handle<v8::Value> verticalOverflowAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.OverflowEvent.verticalOverflow._get");
    OverflowEvent* imp = V8OverflowEvent::toNative(info.Holder());
    return v8Boolean(imp->verticalOverflow());
}

static v8::Handle<v8::Value> initOverflowEventCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.OverflowEvent.initOverflowEvent");
    OverflowEvent* imp = V8OverflowEvent::toNative(args.Holder());
    EXCEPTION_BLOCK(int, orient, toUInt32(args[0]));
    EXCEPTION_BLOCK(bool, horizontalOverflow, args[1]->BooleanValue());
    EXCEPTION_BLOCK(bool, verticalOverflow, args[2]->BooleanValue());
    imp->initOverflowEvent(orient, horizontalOverflow, verticalOverflow);
    return v8::Handle<v8::Value>();
}

} // namespace OverflowEventInternal

static const BatchedAttribute OverflowEventAttrs[] = {
    // Attribute 'orient' (Type: 'readonly attribute' ExtAttr: '')
    {"orient", OverflowEventInternal::orientAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'horizontalOverflow' (Type: 'readonly attribute' ExtAttr: '')
    {"horizontalOverflow", OverflowEventInternal::horizontalOverflowAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'verticalOverflow' (Type: 'readonly attribute' ExtAttr: '')
    {"verticalOverflow", OverflowEventInternal::verticalOverflowAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static const BatchedCallback OverflowEventCallbacks[] = {
    {"initOverflowEvent", OverflowEventInternal::initOverflowEventCallback},
};
static const BatchedConstant OverflowEventConsts[] = {
    {"HORIZONTAL", static_cast<signed int>(0)},
    {"VERTICAL", static_cast<signed int>(1)},
    {"BOTH", static_cast<signed int>(2)},
};

COMPILE_ASSERT(0 == OverflowEvent::HORIZONTAL, OverflowEventEnumHORIZONTALIsWrongUseDontCheckEnums);
COMPILE_ASSERT(1 == OverflowEvent::VERTICAL, OverflowEventEnumVERTICALIsWrongUseDontCheckEnums);
COMPILE_ASSERT(2 == OverflowEvent::BOTH, OverflowEventEnumBOTHIsWrongUseDontCheckEnums);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8OverflowEventTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "OverflowEvent", V8Event::GetTemplate(), V8OverflowEvent::internalFieldCount,
        OverflowEventAttrs, sizeof(OverflowEventAttrs) / sizeof(*OverflowEventAttrs),
        OverflowEventCallbacks, sizeof(OverflowEventCallbacks) / sizeof(*OverflowEventCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    
    batchConfigureConstants(desc, proto, OverflowEventConsts, sizeof(OverflowEventConsts) / sizeof(*OverflowEventConsts));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8OverflowEvent::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8OverflowEventRawCache = createRawTemplate();
    return V8OverflowEventRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8OverflowEvent::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8OverflowEventCache = ConfigureV8OverflowEventTemplate(GetRawTemplate());
    return V8OverflowEventCache;
}

OverflowEvent* V8OverflowEvent::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<OverflowEvent*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8OverflowEvent::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8OverflowEvent::wrap(OverflowEvent* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMObjectMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<OverflowEvent > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(OverflowEvent* impl)
{
    if (!impl)
        return v8::Null();
    return V8OverflowEvent::wrap(impl);
}

void V8OverflowEvent::derefObject(void* object)
{
    static_cast<OverflowEvent*>(object)->deref();
}

} // namespace WebCore
