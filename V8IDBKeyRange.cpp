/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8IDBKeyRange.h"

#if ENABLE(INDEXED_DATABASE)

#include "ExceptionCode.h"
#include "IDBBindingUtilities.h"
#include "IDBKey.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IDBKey.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

namespace WebCore {

WrapperTypeInfo V8IDBKeyRange::info = { V8IDBKeyRange::GetTemplate, V8IDBKeyRange::derefObject, 0 };

namespace IDBKeyRangeInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> leftAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBKeyRange.left._get");
    IDBKeyRange* imp = V8IDBKeyRange::toNative(info.Holder());
    return toV8(imp->left());
}

static v8::Handle<v8::Value> rightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBKeyRange.right._get");
    IDBKeyRange* imp = V8IDBKeyRange::toNative(info.Holder());
    return toV8(imp->right());
}

static v8::Handle<v8::Value> flagsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBKeyRange.flags._get");
    IDBKeyRange* imp = V8IDBKeyRange::toNative(info.Holder());
    return v8::Integer::New(imp->flags());
}

static v8::Handle<v8::Value> onlyCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBKeyRange.only");
    IDBKeyRange* imp = V8IDBKeyRange::toNative(args.Holder());
    EXCEPTION_BLOCK(RefPtr<IDBKey>, value, createIDBKeyFromValue(args[0]));
    return toV8(imp->only(value));
}

static v8::Handle<v8::Value> leftBoundCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBKeyRange.leftBound");
    IDBKeyRange* imp = V8IDBKeyRange::toNative(args.Holder());
    EXCEPTION_BLOCK(RefPtr<IDBKey>, bound, createIDBKeyFromValue(args[0]));
    if (args.Length() <= 1) {
        return toV8(imp->leftBound(bound));
    }
    EXCEPTION_BLOCK(bool, open, args[1]->BooleanValue());
    return toV8(imp->leftBound(bound, open));
}

static v8::Handle<v8::Value> rightBoundCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBKeyRange.rightBound");
    IDBKeyRange* imp = V8IDBKeyRange::toNative(args.Holder());
    EXCEPTION_BLOCK(RefPtr<IDBKey>, bound, createIDBKeyFromValue(args[0]));
    if (args.Length() <= 1) {
        return toV8(imp->rightBound(bound));
    }
    EXCEPTION_BLOCK(bool, open, args[1]->BooleanValue());
    return toV8(imp->rightBound(bound, open));
}

static v8::Handle<v8::Value> boundCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBKeyRange.bound");
    IDBKeyRange* imp = V8IDBKeyRange::toNative(args.Holder());
    EXCEPTION_BLOCK(RefPtr<IDBKey>, left, createIDBKeyFromValue(args[0]));
    EXCEPTION_BLOCK(RefPtr<IDBKey>, right, createIDBKeyFromValue(args[1]));
    if (args.Length() <= 2) {
        return toV8(imp->bound(left, right));
    }
    EXCEPTION_BLOCK(bool, openLeft, args[2]->BooleanValue());
    if (args.Length() <= 3) {
        return toV8(imp->bound(left, right, openLeft));
    }
    EXCEPTION_BLOCK(bool, openRight, args[3]->BooleanValue());
    return toV8(imp->bound(left, right, openLeft, openRight));
}

} // namespace IDBKeyRangeInternal

static const BatchedAttribute IDBKeyRangeAttrs[] = {
    // Attribute 'left' (Type: 'readonly attribute' ExtAttr: '')
    {"left", IDBKeyRangeInternal::leftAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'right' (Type: 'readonly attribute' ExtAttr: '')
    {"right", IDBKeyRangeInternal::rightAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'flags' (Type: 'readonly attribute' ExtAttr: '')
    {"flags", IDBKeyRangeInternal::flagsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static const BatchedCallback IDBKeyRangeCallbacks[] = {
    {"only", IDBKeyRangeInternal::onlyCallback},
    {"leftBound", IDBKeyRangeInternal::leftBoundCallback},
    {"rightBound", IDBKeyRangeInternal::rightBoundCallback},
    {"bound", IDBKeyRangeInternal::boundCallback},
};
static const BatchedConstant IDBKeyRangeConsts[] = {
    {"SINGLE", static_cast<signed int>(0)},
    {"LEFT_OPEN", static_cast<signed int>(1)},
    {"RIGHT_OPEN", static_cast<signed int>(2)},
    {"LEFT_BOUND", static_cast<signed int>(4)},
    {"RIGHT_BOUND", static_cast<signed int>(8)},
};

COMPILE_ASSERT(0 == IDBKeyRange::SINGLE, IDBKeyRangeEnumSINGLEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(1 == IDBKeyRange::LEFT_OPEN, IDBKeyRangeEnumLEFT_OPENIsWrongUseDontCheckEnums);
COMPILE_ASSERT(2 == IDBKeyRange::RIGHT_OPEN, IDBKeyRangeEnumRIGHT_OPENIsWrongUseDontCheckEnums);
COMPILE_ASSERT(4 == IDBKeyRange::LEFT_BOUND, IDBKeyRangeEnumLEFT_BOUNDIsWrongUseDontCheckEnums);
COMPILE_ASSERT(8 == IDBKeyRange::RIGHT_BOUND, IDBKeyRangeEnumRIGHT_BOUNDIsWrongUseDontCheckEnums);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8IDBKeyRangeTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "IDBKeyRange", v8::Persistent<v8::FunctionTemplate>(), V8IDBKeyRange::internalFieldCount,
        IDBKeyRangeAttrs, sizeof(IDBKeyRangeAttrs) / sizeof(*IDBKeyRangeAttrs),
        IDBKeyRangeCallbacks, sizeof(IDBKeyRangeCallbacks) / sizeof(*IDBKeyRangeCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    
    batchConfigureConstants(desc, proto, IDBKeyRangeConsts, sizeof(IDBKeyRangeConsts) / sizeof(*IDBKeyRangeConsts));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8IDBKeyRange::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8IDBKeyRangeRawCache = createRawTemplate();
    return V8IDBKeyRangeRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8IDBKeyRange::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8IDBKeyRangeCache = ConfigureV8IDBKeyRangeTemplate(GetRawTemplate());
    return V8IDBKeyRangeCache;
}

IDBKeyRange* V8IDBKeyRange::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<IDBKeyRange*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8IDBKeyRange::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8IDBKeyRange::wrap(IDBKeyRange* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMObjectMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<IDBKeyRange > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(IDBKeyRange* impl)
{
    if (!impl)
        return v8::Null();
    return V8IDBKeyRange::wrap(impl);
}

void V8IDBKeyRange::derefObject(void* object)
{
    static_cast<IDBKeyRange*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(INDEXED_DATABASE)
