/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8TouchEvent.h"

#if ENABLE(TOUCH_EVENTS)

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWindow.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include "V8TouchList.h"
#include "V8UIEvent.h"

namespace WebCore {

WrapperTypeInfo V8TouchEvent::info = { V8TouchEvent::GetTemplate, V8TouchEvent::derefObject, 0 };

namespace TouchEventInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> touchesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.TouchEvent.touches._get");
    TouchEvent* imp = V8TouchEvent::toNative(info.Holder());
    RefPtr<TouchList> result = imp->touches();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setHiddenReference(info.Holder(), wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> targetTouchesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.TouchEvent.targetTouches._get");
    TouchEvent* imp = V8TouchEvent::toNative(info.Holder());
    RefPtr<TouchList> result = imp->targetTouches();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setHiddenReference(info.Holder(), wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> changedTouchesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.TouchEvent.changedTouches._get");
    TouchEvent* imp = V8TouchEvent::toNative(info.Holder());
    RefPtr<TouchList> result = imp->changedTouches();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setHiddenReference(info.Holder(), wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> ctrlKeyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.TouchEvent.ctrlKey._get");
    TouchEvent* imp = V8TouchEvent::toNative(info.Holder());
    return v8Boolean(imp->ctrlKey());
}

static v8::Handle<v8::Value> shiftKeyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.TouchEvent.shiftKey._get");
    TouchEvent* imp = V8TouchEvent::toNative(info.Holder());
    return v8Boolean(imp->shiftKey());
}

static v8::Handle<v8::Value> altKeyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.TouchEvent.altKey._get");
    TouchEvent* imp = V8TouchEvent::toNative(info.Holder());
    return v8Boolean(imp->altKey());
}

static v8::Handle<v8::Value> metaKeyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.TouchEvent.metaKey._get");
    TouchEvent* imp = V8TouchEvent::toNative(info.Holder());
    return v8Boolean(imp->metaKey());
}

static v8::Handle<v8::Value> initTouchEventCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.TouchEvent.initTouchEvent");
    TouchEvent* imp = V8TouchEvent::toNative(args.Holder());
    EXCEPTION_BLOCK(TouchList*, touches, V8TouchList::HasInstance(args[0]) ? V8TouchList::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0);
    EXCEPTION_BLOCK(TouchList*, targetTouches, V8TouchList::HasInstance(args[1]) ? V8TouchList::toNative(v8::Handle<v8::Object>::Cast(args[1])) : 0);
    EXCEPTION_BLOCK(TouchList*, changedTouches, V8TouchList::HasInstance(args[2]) ? V8TouchList::toNative(v8::Handle<v8::Object>::Cast(args[2])) : 0);
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, type, args[3]);
    EXCEPTION_BLOCK(DOMWindow*, view, V8DOMWindow::HasInstance(args[4]) ? V8DOMWindow::toNative(v8::Handle<v8::Object>::Cast(args[4])) : 0);
    EXCEPTION_BLOCK(int, screenX, toInt32(args[5]));
    EXCEPTION_BLOCK(int, screenY, toInt32(args[6]));
    EXCEPTION_BLOCK(int, clientX, toInt32(args[7]));
    EXCEPTION_BLOCK(int, clientY, toInt32(args[8]));
    EXCEPTION_BLOCK(bool, ctrlKey, args[9]->BooleanValue());
    EXCEPTION_BLOCK(bool, altKey, args[10]->BooleanValue());
    EXCEPTION_BLOCK(bool, shiftKey, args[11]->BooleanValue());
    EXCEPTION_BLOCK(bool, metaKey, args[12]->BooleanValue());
    imp->initTouchEvent(touches, targetTouches, changedTouches, type, view, screenX, screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey);
    return v8::Handle<v8::Value>();
}

} // namespace TouchEventInternal

static const BatchedAttribute TouchEventAttrs[] = {
    // Attribute 'touches' (Type: 'readonly attribute' ExtAttr: '')
    {"touches", TouchEventInternal::touchesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'targetTouches' (Type: 'readonly attribute' ExtAttr: '')
    {"targetTouches", TouchEventInternal::targetTouchesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'changedTouches' (Type: 'readonly attribute' ExtAttr: '')
    {"changedTouches", TouchEventInternal::changedTouchesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'ctrlKey' (Type: 'readonly attribute' ExtAttr: '')
    {"ctrlKey", TouchEventInternal::ctrlKeyAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'shiftKey' (Type: 'readonly attribute' ExtAttr: '')
    {"shiftKey", TouchEventInternal::shiftKeyAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'altKey' (Type: 'readonly attribute' ExtAttr: '')
    {"altKey", TouchEventInternal::altKeyAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'metaKey' (Type: 'readonly attribute' ExtAttr: '')
    {"metaKey", TouchEventInternal::metaKeyAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8TouchEventTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "TouchEvent", V8UIEvent::GetTemplate(), V8TouchEvent::internalFieldCount,
        TouchEventAttrs, sizeof(TouchEventAttrs) / sizeof(*TouchEventAttrs),
        0, 0);
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom Signature 'initTouchEvent'
    const int initTouchEventArgc = 13;
    v8::Handle<v8::FunctionTemplate> initTouchEventArgv[initTouchEventArgc] = { V8TouchList::GetRawTemplate(), V8TouchList::GetRawTemplate(), V8TouchList::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), V8DOMWindow::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> initTouchEventSignature = v8::Signature::New(desc, initTouchEventArgc, initTouchEventArgv);
    proto->Set(v8::String::New("initTouchEvent"), v8::FunctionTemplate::New(TouchEventInternal::initTouchEventCallback, v8::Handle<v8::Value>(), initTouchEventSignature));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8TouchEvent::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8TouchEventRawCache = createRawTemplate();
    return V8TouchEventRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8TouchEvent::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8TouchEventCache = ConfigureV8TouchEventTemplate(GetRawTemplate());
    return V8TouchEventCache;
}

TouchEvent* V8TouchEvent::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<TouchEvent*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8TouchEvent::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8TouchEvent::wrap(TouchEvent* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMObjectMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<TouchEvent > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(TouchEvent* impl)
{
    if (!impl)
        return v8::Null();
    return V8TouchEvent::wrap(impl);
}

void V8TouchEvent::derefObject(void* object)
{
    static_cast<TouchEvent*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(TOUCH_EVENTS)
