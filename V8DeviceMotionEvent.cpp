/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8DeviceMotionEvent.h"

#if ENABLE(DEVICE_ORIENTATION)

#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8Event.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8DeviceMotionEvent::info = { V8DeviceMotionEvent::GetTemplate, V8DeviceMotionEvent::derefObject, 0 };

namespace DeviceMotionEventInternal {

template <typename T> void V8_USE(T) { }

} // namespace DeviceMotionEventInternal

static const BatchedAttribute DeviceMotionEventAttrs[] = {
    // Attribute 'xAcceleration' (Type: 'readonly attribute' ExtAttr: 'Custom')
    {"xAcceleration", V8DeviceMotionEvent::xAccelerationAccessorGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'yAcceleration' (Type: 'readonly attribute' ExtAttr: 'Custom')
    {"yAcceleration", V8DeviceMotionEvent::yAccelerationAccessorGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'zAcceleration' (Type: 'readonly attribute' ExtAttr: 'Custom')
    {"zAcceleration", V8DeviceMotionEvent::zAccelerationAccessorGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'xRotationRate' (Type: 'readonly attribute' ExtAttr: 'Custom')
    {"xRotationRate", V8DeviceMotionEvent::xRotationRateAccessorGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'yRotationRate' (Type: 'readonly attribute' ExtAttr: 'Custom')
    {"yRotationRate", V8DeviceMotionEvent::yRotationRateAccessorGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'zRotationRate' (Type: 'readonly attribute' ExtAttr: 'Custom')
    {"zRotationRate", V8DeviceMotionEvent::zRotationRateAccessorGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'interval' (Type: 'readonly attribute' ExtAttr: 'Custom')
    {"interval", V8DeviceMotionEvent::intervalAccessorGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static const BatchedCallback DeviceMotionEventCallbacks[] = {
    {"initDeviceMotionEvent", V8DeviceMotionEvent::initDeviceMotionEventCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8DeviceMotionEventTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "DeviceMotionEvent", V8Event::GetTemplate(), V8DeviceMotionEvent::internalFieldCount,
        DeviceMotionEventAttrs, sizeof(DeviceMotionEventAttrs) / sizeof(*DeviceMotionEventAttrs),
        DeviceMotionEventCallbacks, sizeof(DeviceMotionEventCallbacks) / sizeof(*DeviceMotionEventCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8DeviceMotionEvent::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8DeviceMotionEventRawCache = createRawTemplate();
    return V8DeviceMotionEventRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8DeviceMotionEvent::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8DeviceMotionEventCache = ConfigureV8DeviceMotionEventTemplate(GetRawTemplate());
    return V8DeviceMotionEventCache;
}

DeviceMotionEvent* V8DeviceMotionEvent::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<DeviceMotionEvent*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8DeviceMotionEvent::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8DeviceMotionEvent::wrap(DeviceMotionEvent* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMObjectMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<DeviceMotionEvent > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(DeviceMotionEvent* impl)
{
    if (!impl)
        return v8::Null();
    return V8DeviceMotionEvent::wrap(impl);
}

void V8DeviceMotionEvent::derefObject(void* object)
{
    static_cast<DeviceMotionEvent*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(DEVICE_ORIENTATION)
