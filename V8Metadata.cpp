/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8Metadata.h"

#if ENABLE(FILE_SYSTEM)

#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8Metadata::info = { V8Metadata::GetTemplate, V8Metadata::derefObject, 0 };

namespace MetadataInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> modificationTimeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Metadata.modificationTime._get");
    Metadata* imp = V8Metadata::toNative(info.Holder());
    return v8::Number::New(imp->modificationTime());
}

} // namespace MetadataInternal

static const BatchedAttribute MetadataAttrs[] = {
    // Attribute 'modificationTime' (Type: 'readonly attribute' ExtAttr: '')
    {"modificationTime", MetadataInternal::modificationTimeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8MetadataTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "Metadata", v8::Persistent<v8::FunctionTemplate>(), V8Metadata::internalFieldCount,
        MetadataAttrs, sizeof(MetadataAttrs) / sizeof(*MetadataAttrs),
        0, 0);
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8Metadata::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8MetadataRawCache = createRawTemplate();
    return V8MetadataRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8Metadata::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8MetadataCache = ConfigureV8MetadataTemplate(GetRawTemplate());
    return V8MetadataCache;
}

Metadata* V8Metadata::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<Metadata*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8Metadata::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8Metadata::wrap(Metadata* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMObjectMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<Metadata > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(Metadata* impl)
{
    if (!impl)
        return v8::Null();
    return V8Metadata::wrap(impl);
}

void V8Metadata::derefObject(void* object)
{
    static_cast<Metadata*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(FILE_SYSTEM)
