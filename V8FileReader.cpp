/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8FileReader.h"

#if ENABLE(BLOB)

#include "EventListener.h"
#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8AbstractEventListener.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8Blob.h"
#include "V8DOMWrapper.h"
#include "V8File.h"
#include "V8FileError.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8FileReader::info = { V8FileReader::GetTemplate, V8FileReader::derefObject, 0 };

namespace FileReaderInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> readyStateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileReader.readyState._get");
    FileReader* imp = V8FileReader::toNative(info.Holder());
    return v8::Integer::New(imp->readyState());
}

static v8::Handle<v8::Value> resultAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileReader.result._get");
    FileReader* imp = V8FileReader::toNative(info.Holder());
    return v8StringOrNull(imp->result());
}

static v8::Handle<v8::Value> errorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileReader.error._get");
    FileReader* imp = V8FileReader::toNative(info.Holder());
    RefPtr<FileError> result = imp->error();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setHiddenReference(info.Holder(), wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> onloadstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileReader.onloadstart._get");
    FileReader* imp = V8FileReader::toNative(info.Holder());
    return imp->onloadstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onloadstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onloadstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileReader.onloadstart._set");
    FileReader* imp = V8FileReader::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onloadstart(), value, V8FileReader::eventListenerCacheIndex);
    imp->setOnloadstart(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onprogressAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileReader.onprogress._get");
    FileReader* imp = V8FileReader::toNative(info.Holder());
    return imp->onprogress() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onprogress())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onprogressAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileReader.onprogress._set");
    FileReader* imp = V8FileReader::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onprogress(), value, V8FileReader::eventListenerCacheIndex);
    imp->setOnprogress(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileReader.onload._get");
    FileReader* imp = V8FileReader::toNative(info.Holder());
    return imp->onload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileReader.onload._set");
    FileReader* imp = V8FileReader::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onload(), value, V8FileReader::eventListenerCacheIndex);
    imp->setOnload(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onabortAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileReader.onabort._get");
    FileReader* imp = V8FileReader::toNative(info.Holder());
    return imp->onabort() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onabort())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onabortAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileReader.onabort._set");
    FileReader* imp = V8FileReader::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onabort(), value, V8FileReader::eventListenerCacheIndex);
    imp->setOnabort(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileReader.onerror._get");
    FileReader* imp = V8FileReader::toNative(info.Holder());
    return imp->onerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileReader.onerror._set");
    FileReader* imp = V8FileReader::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onerror(), value, V8FileReader::eventListenerCacheIndex);
    imp->setOnerror(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onloadendAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileReader.onloadend._get");
    FileReader* imp = V8FileReader::toNative(info.Holder());
    return imp->onloadend() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onloadend())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onloadendAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileReader.onloadend._set");
    FileReader* imp = V8FileReader::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onloadend(), value, V8FileReader::eventListenerCacheIndex);
    imp->setOnloadend(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> readAsBinaryStringCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.FileReader.readAsBinaryString");
    FileReader* imp = V8FileReader::toNative(args.Holder());
    EXCEPTION_BLOCK(Blob*, fileBlob, V8Blob::HasInstance(args[0]) ? V8Blob::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0);
    imp->readAsBinaryString(fileBlob);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> readAsTextCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.FileReader.readAsText");
    FileReader* imp = V8FileReader::toNative(args.Holder());
    EXCEPTION_BLOCK(Blob*, fileBlob, V8Blob::HasInstance(args[0]) ? V8Blob::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0);
    if (args.Length() <= 1) {
        imp->readAsText(fileBlob);
        return v8::Handle<v8::Value>();
    }
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, encoding, args[1]);
    imp->readAsText(fileBlob, encoding);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> readAsDataURLCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.FileReader.readAsDataURL");
    FileReader* imp = V8FileReader::toNative(args.Holder());
    EXCEPTION_BLOCK(File*, file, V8File::HasInstance(args[0]) ? V8File::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0);
    imp->readAsDataURL(file);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> abortCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.FileReader.abort");
    FileReader* imp = V8FileReader::toNative(args.Holder());
    imp->abort();
    return v8::Handle<v8::Value>();
}

} // namespace FileReaderInternal

static const BatchedAttribute FileReaderAttrs[] = {
    // Attribute 'readyState' (Type: 'readonly attribute' ExtAttr: '')
    {"readyState", FileReaderInternal::readyStateAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'result' (Type: 'readonly attribute' ExtAttr: 'ConvertScriptString')
    {"result", FileReaderInternal::resultAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'error' (Type: 'readonly attribute' ExtAttr: '')
    {"error", FileReaderInternal::errorAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onloadstart' (Type: 'attribute' ExtAttr: '')
    {"onloadstart", FileReaderInternal::onloadstartAttrGetter, FileReaderInternal::onloadstartAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onprogress' (Type: 'attribute' ExtAttr: '')
    {"onprogress", FileReaderInternal::onprogressAttrGetter, FileReaderInternal::onprogressAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onload' (Type: 'attribute' ExtAttr: '')
    {"onload", FileReaderInternal::onloadAttrGetter, FileReaderInternal::onloadAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onabort' (Type: 'attribute' ExtAttr: '')
    {"onabort", FileReaderInternal::onabortAttrGetter, FileReaderInternal::onabortAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onerror' (Type: 'attribute' ExtAttr: '')
    {"onerror", FileReaderInternal::onerrorAttrGetter, FileReaderInternal::onerrorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onloadend' (Type: 'attribute' ExtAttr: '')
    {"onloadend", FileReaderInternal::onloadendAttrGetter, FileReaderInternal::onloadendAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static const BatchedCallback FileReaderCallbacks[] = {
    {"readAsText", FileReaderInternal::readAsTextCallback},
    {"abort", FileReaderInternal::abortCallback},
};
static const BatchedConstant FileReaderConsts[] = {
    {"EMPTY", static_cast<signed int>(0)},
    {"LOADING", static_cast<signed int>(1)},
    {"DONE", static_cast<signed int>(2)},
};

COMPILE_ASSERT(0 == FileReader::EMPTY, FileReaderEnumEMPTYIsWrongUseDontCheckEnums);
COMPILE_ASSERT(1 == FileReader::LOADING, FileReaderEnumLOADINGIsWrongUseDontCheckEnums);
COMPILE_ASSERT(2 == FileReader::DONE, FileReaderEnumDONEIsWrongUseDontCheckEnums);

v8::Handle<v8::Value> V8FileReader::constructorCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.FileReader.Contructor");
    return V8Proxy::constructDOMObjectWithScriptExecutionContext<FileReader>(args, &info);
}
static v8::Persistent<v8::FunctionTemplate> ConfigureV8FileReaderTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "FileReader", v8::Persistent<v8::FunctionTemplate>(), V8FileReader::internalFieldCount,
        FileReaderAttrs, sizeof(FileReaderAttrs) / sizeof(*FileReaderAttrs),
        FileReaderCallbacks, sizeof(FileReaderCallbacks) / sizeof(*FileReaderCallbacks));
        desc->SetCallHandler(V8FileReader::constructorCallback);
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom Signature 'readAsBinaryString'
    const int readAsBinaryStringArgc = 1;
    v8::Handle<v8::FunctionTemplate> readAsBinaryStringArgv[readAsBinaryStringArgc] = { V8Blob::GetRawTemplate() };
    v8::Handle<v8::Signature> readAsBinaryStringSignature = v8::Signature::New(desc, readAsBinaryStringArgc, readAsBinaryStringArgv);
    proto->Set(v8::String::New("readAsBinaryString"), v8::FunctionTemplate::New(FileReaderInternal::readAsBinaryStringCallback, v8::Handle<v8::Value>(), readAsBinaryStringSignature));

    // Custom Signature 'readAsDataURL'
    const int readAsDataURLArgc = 1;
    v8::Handle<v8::FunctionTemplate> readAsDataURLArgv[readAsDataURLArgc] = { V8File::GetRawTemplate() };
    v8::Handle<v8::Signature> readAsDataURLSignature = v8::Signature::New(desc, readAsDataURLArgc, readAsDataURLArgv);
    proto->Set(v8::String::New("readAsDataURL"), v8::FunctionTemplate::New(FileReaderInternal::readAsDataURLCallback, v8::Handle<v8::Value>(), readAsDataURLSignature));
    batchConfigureConstants(desc, proto, FileReaderConsts, sizeof(FileReaderConsts) / sizeof(*FileReaderConsts));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8FileReader::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8FileReaderRawCache = createRawTemplate();
    return V8FileReaderRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8FileReader::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8FileReaderCache = ConfigureV8FileReaderTemplate(GetRawTemplate());
    return V8FileReaderCache;
}

FileReader* V8FileReader::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<FileReader*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8FileReader::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8FileReader::wrap(FileReader* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMObjectMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<FileReader > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(FileReader* impl)
{
    if (!impl)
        return v8::Null();
    return V8FileReader::wrap(impl);
}

void V8FileReader::derefObject(void* object)
{
    static_cast<FileReader*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(BLOB)
