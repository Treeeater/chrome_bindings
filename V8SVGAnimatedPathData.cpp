/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8SVGAnimatedPathData.h"

#if ENABLE(SVG)

#include "RuntimeEnabledFeatures.h"
#include "SVGAnimatedTemplate.h"
#include "SVGPathSegList.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include "V8SVGPathSegList.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

namespace WebCore {

WrapperTypeInfo V8SVGAnimatedPathData::info = { V8SVGAnimatedPathData::GetTemplate, V8SVGAnimatedPathData::derefObject, 0 };

namespace SVGAnimatedPathDataInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> pathSegListAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGAnimatedPathData.pathSegList._get");
    SVGAnimatedPathData* imp = V8SVGAnimatedPathData::toNative(info.Holder());
    SVGElement* context = V8Proxy::svgContext(imp);
    PassRefPtr<SVGPathSegList> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->pathSegList(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> normalizedPathSegListAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGAnimatedPathData.normalizedPathSegList._get");
    SVGAnimatedPathData* imp = V8SVGAnimatedPathData::toNative(info.Holder());
    SVGElement* context = V8Proxy::svgContext(imp);
    PassRefPtr<SVGPathSegList> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->normalizedPathSegList(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> animatedPathSegListAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGAnimatedPathData.animatedPathSegList._get");
    SVGAnimatedPathData* imp = V8SVGAnimatedPathData::toNative(info.Holder());
    SVGElement* context = V8Proxy::svgContext(imp);
    PassRefPtr<SVGPathSegList> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->animatedPathSegList(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> animatedNormalizedPathSegListAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGAnimatedPathData.animatedNormalizedPathSegList._get");
    SVGAnimatedPathData* imp = V8SVGAnimatedPathData::toNative(info.Holder());
    SVGElement* context = V8Proxy::svgContext(imp);
    PassRefPtr<SVGPathSegList> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->animatedNormalizedPathSegList(), context);
    return toV8(resultAsPassRefPtr);
}

} // namespace SVGAnimatedPathDataInternal

static const BatchedAttribute SVGAnimatedPathDataAttrs[] = {
    // Attribute 'pathSegList' (Type: 'readonly attribute' ExtAttr: '')
    {"pathSegList", SVGAnimatedPathDataInternal::pathSegListAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'normalizedPathSegList' (Type: 'readonly attribute' ExtAttr: '')
    {"normalizedPathSegList", SVGAnimatedPathDataInternal::normalizedPathSegListAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'animatedPathSegList' (Type: 'readonly attribute' ExtAttr: '')
    {"animatedPathSegList", SVGAnimatedPathDataInternal::animatedPathSegListAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'animatedNormalizedPathSegList' (Type: 'readonly attribute' ExtAttr: '')
    {"animatedNormalizedPathSegList", SVGAnimatedPathDataInternal::animatedNormalizedPathSegListAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8SVGAnimatedPathDataTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "SVGAnimatedPathData", v8::Persistent<v8::FunctionTemplate>(), V8SVGAnimatedPathData::internalFieldCount,
        SVGAnimatedPathDataAttrs, sizeof(SVGAnimatedPathDataAttrs) / sizeof(*SVGAnimatedPathDataAttrs),
        0, 0);
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8SVGAnimatedPathData::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8SVGAnimatedPathDataRawCache = createRawTemplate();
    return V8SVGAnimatedPathDataRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8SVGAnimatedPathData::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8SVGAnimatedPathDataCache = ConfigureV8SVGAnimatedPathDataTemplate(GetRawTemplate());
    return V8SVGAnimatedPathDataCache;
}

SVGAnimatedPathData* V8SVGAnimatedPathData::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<SVGAnimatedPathData*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8SVGAnimatedPathData::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8SVGAnimatedPathData::wrap(SVGAnimatedPathData* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMSVGObjectWithContextMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMSVGObjectWithContextMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<SVGAnimatedPathData > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(SVGAnimatedPathData* impl)
{
    if (!impl)
        return v8::Null();
    return V8SVGAnimatedPathData::wrap(impl);
}

void V8SVGAnimatedPathData::derefObject(void* object)
{
    static_cast<SVGAnimatedPathData*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(SVG)
