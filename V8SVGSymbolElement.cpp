/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8SVGSymbolElement.h"

#if ENABLE(SVG)

#include "CSSMutableStyleDeclaration.h"
#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8CSSStyleDeclaration.h"
#include "V8CSSValue.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include "V8SVGAnimatedBoolean.h"
#include "V8SVGAnimatedPreserveAspectRatio.h"
#include "V8SVGAnimatedRect.h"
#include "V8SVGAnimatedString.h"
#include "V8SVGElement.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

namespace WebCore {

WrapperTypeInfo V8SVGSymbolElement::info = { V8SVGSymbolElement::GetTemplate, V8SVGSymbolElement::derefObject, 0 };

namespace SVGSymbolElementInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> xmllangAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSymbolElement.xmllang._get");
    SVGSymbolElement* imp = V8SVGSymbolElement::toNative(info.Holder());
    return v8String(imp->xmllang());
}

static void xmllangAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSymbolElement.xmllang._set");
    SVGSymbolElement* imp = V8SVGSymbolElement::toNative(info.Holder());
    V8Parameter<> v = value;
    imp->setXmllang(v);
    return;
}

static v8::Handle<v8::Value> xmlspaceAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSymbolElement.xmlspace._get");
    SVGSymbolElement* imp = V8SVGSymbolElement::toNative(info.Holder());
    return v8String(imp->xmlspace());
}

static void xmlspaceAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSymbolElement.xmlspace._set");
    SVGSymbolElement* imp = V8SVGSymbolElement::toNative(info.Holder());
    V8Parameter<> v = value;
    imp->setXmlspace(v);
    return;
}

static v8::Handle<v8::Value> externalResourcesRequiredAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSymbolElement.externalResourcesRequired._get");
    SVGSymbolElement* imp = V8SVGSymbolElement::toNative(info.Holder());
    SVGElement* context = imp;
    PassRefPtr<SVGAnimatedBoolean> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->externalResourcesRequiredAnimated(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> classNameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSymbolElement.className._get");
    SVGSymbolElement* imp = V8SVGSymbolElement::toNative(info.Holder());
    SVGElement* context = imp;
    PassRefPtr<SVGAnimatedString> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->classNameAnimated(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> styleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSymbolElement.style._get");
    SVGSymbolElement* imp = V8SVGSymbolElement::toNative(info.Holder());
    return toV8(imp->style());
}

static v8::Handle<v8::Value> viewBoxAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSymbolElement.viewBox._get");
    SVGSymbolElement* imp = V8SVGSymbolElement::toNative(info.Holder());
    SVGElement* context = imp;
    PassRefPtr<SVGAnimatedRect> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->viewBoxAnimated(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> preserveAspectRatioAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSymbolElement.preserveAspectRatio._get");
    SVGSymbolElement* imp = V8SVGSymbolElement::toNative(info.Holder());
    SVGElement* context = imp;
    PassRefPtr<SVGAnimatedPreserveAspectRatio> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->preserveAspectRatioAnimated(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> getPresentationAttributeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSymbolElement.getPresentationAttribute");
    SVGSymbolElement* imp = V8SVGSymbolElement::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, name, args[0]);
    return toV8(imp->getPresentationAttribute(name));
}

} // namespace SVGSymbolElementInternal

static const BatchedAttribute SVGSymbolElementAttrs[] = {
    // Attribute 'xmllang' (Type: 'attribute' ExtAttr: '')
    {"xmllang", SVGSymbolElementInternal::xmllangAttrGetter, SVGSymbolElementInternal::xmllangAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'xmlspace' (Type: 'attribute' ExtAttr: '')
    {"xmlspace", SVGSymbolElementInternal::xmlspaceAttrGetter, SVGSymbolElementInternal::xmlspaceAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'externalResourcesRequired' (Type: 'readonly attribute' ExtAttr: '')
    {"externalResourcesRequired", SVGSymbolElementInternal::externalResourcesRequiredAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'className' (Type: 'readonly attribute' ExtAttr: '')
    {"className", SVGSymbolElementInternal::classNameAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'style' (Type: 'readonly attribute' ExtAttr: '')
    {"style", SVGSymbolElementInternal::styleAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'viewBox' (Type: 'readonly attribute' ExtAttr: '')
    {"viewBox", SVGSymbolElementInternal::viewBoxAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'preserveAspectRatio' (Type: 'readonly attribute' ExtAttr: '')
    {"preserveAspectRatio", SVGSymbolElementInternal::preserveAspectRatioAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static const BatchedCallback SVGSymbolElementCallbacks[] = {
    {"getPresentationAttribute", SVGSymbolElementInternal::getPresentationAttributeCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8SVGSymbolElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "SVGSymbolElement", V8SVGElement::GetTemplate(), V8SVGSymbolElement::internalFieldCount,
        SVGSymbolElementAttrs, sizeof(SVGSymbolElementAttrs) / sizeof(*SVGSymbolElementAttrs),
        SVGSymbolElementCallbacks, sizeof(SVGSymbolElementCallbacks) / sizeof(*SVGSymbolElementCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8SVGSymbolElement::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8SVGSymbolElementRawCache = createRawTemplate();
    return V8SVGSymbolElementRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8SVGSymbolElement::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8SVGSymbolElementCache = ConfigureV8SVGSymbolElementTemplate(GetRawTemplate());
    return V8SVGSymbolElementCache;
}

SVGSymbolElement* V8SVGSymbolElement::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<SVGSymbolElement*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8SVGSymbolElement::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8SVGSymbolElement::wrap(SVGSymbolElement* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    if (impl->document()) {
        proxy = V8Proxy::retrieve(impl->document()->frame());
        if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl))
            proxy->windowShell()->initContextIfNeeded();
    }

        wrapper = V8DOMWrapper::getWrapper(impl);
        if (!wrapper.IsEmpty())
            return wrapper;

    v8::Handle<v8::Context> context;
    if (proxy)
        context = proxy->context();

    // Enter the node's context and create the wrapper in that context.
    if (!context.IsEmpty())
        context->Enter();
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    // Exit the node's context if it was entered.
    if (!context.IsEmpty())
        context->Exit();
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMNodeMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<SVGSymbolElement > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(SVGSymbolElement* impl)
{
    if (!impl)
        return v8::Null();
    return V8SVGSymbolElement::wrap(impl);
}

void V8SVGSymbolElement::derefObject(void* object)
{
    static_cast<SVGSymbolElement*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(SVG)
