/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8SVGTransform.h"

#if ENABLE(SVG)

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include "V8SVGMatrix.h"
#include "V8SVGPODTypeWrapper.h"

namespace WebCore {

WrapperTypeInfo V8SVGTransform::info = { V8SVGTransform::GetTemplate, V8SVGTransform::derefObject, 0 };

namespace SVGTransformInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> typeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGTransform.type._get");
    V8SVGPODTypeWrapper<SVGTransform>* impWrapper = V8SVGPODTypeWrapper<SVGTransform>::toNative(info.Holder());
    SVGTransform impInstance = *impWrapper;
    SVGTransform* imp = &impInstance;
    return v8::Integer::New(imp->type());
}

static v8::Handle<v8::Value> matrixAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGTransform.matrix._get");
    V8SVGPODTypeWrapper<SVGTransform>* impWrapper = V8SVGPODTypeWrapper<SVGTransform>::toNative(info.Holder());
    SVGTransform impInstance = *impWrapper;
    SVGTransform* imp = &impInstance;
    RefPtr<V8SVGStaticPODTypeWrapperWithPODTypeParent<AffineTransform, SVGTransform> > wrapper = V8SVGStaticPODTypeWrapperWithPODTypeParent<AffineTransform, SVGTransform>::create(imp->matrix(), impWrapper);
    SVGElement* context = V8Proxy::svgContext(impWrapper);
    V8Proxy::setSVGContext(wrapper.get(), context);
    return toV8(wrapper.release().get());
}

static v8::Handle<v8::Value> angleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGTransform.angle._get");
    V8SVGPODTypeWrapper<SVGTransform>* impWrapper = V8SVGPODTypeWrapper<SVGTransform>::toNative(info.Holder());
    SVGTransform impInstance = *impWrapper;
    SVGTransform* imp = &impInstance;
    return v8::Number::New(imp->angle());
}

static v8::Handle<v8::Value> setMatrixCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGTransform.setMatrix");
    V8SVGPODTypeWrapper<SVGTransform>* impWrapper = V8SVGPODTypeWrapper<SVGTransform>::toNative(args.Holder());
    SVGTransform impInstance = *impWrapper;
    SVGTransform* imp = &impInstance;
    ExceptionCode ec = 0;
    {
    bool matrixOk;
    AffineTransform matrix = V8SVGPODTypeUtil::toSVGPODType<AffineTransform>(&V8SVGMatrix::info, args[0], matrixOk);
    if (UNLIKELY(!matrixOk)) {
        ec = TYPE_MISMATCH_ERR;
        goto fail;
    }
    imp->setMatrix(matrix);
    SVGElement* context = V8Proxy::svgContext(impWrapper);
    impWrapper->commitChange(impInstance, context);
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> setTranslateCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGTransform.setTranslate");
    V8SVGPODTypeWrapper<SVGTransform>* impWrapper = V8SVGPODTypeWrapper<SVGTransform>::toNative(args.Holder());
    SVGTransform impInstance = *impWrapper;
    SVGTransform* imp = &impInstance;
    EXCEPTION_BLOCK(float, tx, static_cast<float>(args[0]->NumberValue()));
    EXCEPTION_BLOCK(float, ty, static_cast<float>(args[1]->NumberValue()));
    imp->setTranslate(tx, ty);
    SVGElement* context = V8Proxy::svgContext(impWrapper);
    impWrapper->commitChange(impInstance, context);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> setScaleCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGTransform.setScale");
    V8SVGPODTypeWrapper<SVGTransform>* impWrapper = V8SVGPODTypeWrapper<SVGTransform>::toNative(args.Holder());
    SVGTransform impInstance = *impWrapper;
    SVGTransform* imp = &impInstance;
    EXCEPTION_BLOCK(float, sx, static_cast<float>(args[0]->NumberValue()));
    EXCEPTION_BLOCK(float, sy, static_cast<float>(args[1]->NumberValue()));
    imp->setScale(sx, sy);
    SVGElement* context = V8Proxy::svgContext(impWrapper);
    impWrapper->commitChange(impInstance, context);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> setRotateCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGTransform.setRotate");
    V8SVGPODTypeWrapper<SVGTransform>* impWrapper = V8SVGPODTypeWrapper<SVGTransform>::toNative(args.Holder());
    SVGTransform impInstance = *impWrapper;
    SVGTransform* imp = &impInstance;
    EXCEPTION_BLOCK(float, angle, static_cast<float>(args[0]->NumberValue()));
    EXCEPTION_BLOCK(float, cx, static_cast<float>(args[1]->NumberValue()));
    EXCEPTION_BLOCK(float, cy, static_cast<float>(args[2]->NumberValue()));
    imp->setRotate(angle, cx, cy);
    SVGElement* context = V8Proxy::svgContext(impWrapper);
    impWrapper->commitChange(impInstance, context);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> setSkewXCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGTransform.setSkewX");
    V8SVGPODTypeWrapper<SVGTransform>* impWrapper = V8SVGPODTypeWrapper<SVGTransform>::toNative(args.Holder());
    SVGTransform impInstance = *impWrapper;
    SVGTransform* imp = &impInstance;
    EXCEPTION_BLOCK(float, angle, static_cast<float>(args[0]->NumberValue()));
    imp->setSkewX(angle);
    SVGElement* context = V8Proxy::svgContext(impWrapper);
    impWrapper->commitChange(impInstance, context);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> setSkewYCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGTransform.setSkewY");
    V8SVGPODTypeWrapper<SVGTransform>* impWrapper = V8SVGPODTypeWrapper<SVGTransform>::toNative(args.Holder());
    SVGTransform impInstance = *impWrapper;
    SVGTransform* imp = &impInstance;
    EXCEPTION_BLOCK(float, angle, static_cast<float>(args[0]->NumberValue()));
    imp->setSkewY(angle);
    SVGElement* context = V8Proxy::svgContext(impWrapper);
    impWrapper->commitChange(impInstance, context);
    return v8::Handle<v8::Value>();
}

} // namespace SVGTransformInternal

static const BatchedAttribute SVGTransformAttrs[] = {
    // Attribute 'type' (Type: 'readonly attribute' ExtAttr: '')
    {"type", SVGTransformInternal::typeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'matrix' (Type: 'readonly attribute' ExtAttr: '')
    {"matrix", SVGTransformInternal::matrixAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'angle' (Type: 'readonly attribute' ExtAttr: '')
    {"angle", SVGTransformInternal::angleAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static const BatchedCallback SVGTransformCallbacks[] = {
    {"setMatrix", SVGTransformInternal::setMatrixCallback},
    {"setTranslate", SVGTransformInternal::setTranslateCallback},
    {"setScale", SVGTransformInternal::setScaleCallback},
    {"setRotate", SVGTransformInternal::setRotateCallback},
    {"setSkewX", SVGTransformInternal::setSkewXCallback},
    {"setSkewY", SVGTransformInternal::setSkewYCallback},
};
static const BatchedConstant SVGTransformConsts[] = {
    {"SVG_TRANSFORM_UNKNOWN", static_cast<signed int>(0)},
    {"SVG_TRANSFORM_MATRIX", static_cast<signed int>(1)},
    {"SVG_TRANSFORM_TRANSLATE", static_cast<signed int>(2)},
    {"SVG_TRANSFORM_SCALE", static_cast<signed int>(3)},
    {"SVG_TRANSFORM_ROTATE", static_cast<signed int>(4)},
    {"SVG_TRANSFORM_SKEWX", static_cast<signed int>(5)},
    {"SVG_TRANSFORM_SKEWY", static_cast<signed int>(6)},
};

COMPILE_ASSERT(0 == SVGTransform::SVG_TRANSFORM_UNKNOWN, SVGTransformEnumSVG_TRANSFORM_UNKNOWNIsWrongUseDontCheckEnums);
COMPILE_ASSERT(1 == SVGTransform::SVG_TRANSFORM_MATRIX, SVGTransformEnumSVG_TRANSFORM_MATRIXIsWrongUseDontCheckEnums);
COMPILE_ASSERT(2 == SVGTransform::SVG_TRANSFORM_TRANSLATE, SVGTransformEnumSVG_TRANSFORM_TRANSLATEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(3 == SVGTransform::SVG_TRANSFORM_SCALE, SVGTransformEnumSVG_TRANSFORM_SCALEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(4 == SVGTransform::SVG_TRANSFORM_ROTATE, SVGTransformEnumSVG_TRANSFORM_ROTATEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(5 == SVGTransform::SVG_TRANSFORM_SKEWX, SVGTransformEnumSVG_TRANSFORM_SKEWXIsWrongUseDontCheckEnums);
COMPILE_ASSERT(6 == SVGTransform::SVG_TRANSFORM_SKEWY, SVGTransformEnumSVG_TRANSFORM_SKEWYIsWrongUseDontCheckEnums);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8SVGTransformTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "SVGTransform", v8::Persistent<v8::FunctionTemplate>(), V8SVGTransform::internalFieldCount,
        SVGTransformAttrs, sizeof(SVGTransformAttrs) / sizeof(*SVGTransformAttrs),
        SVGTransformCallbacks, sizeof(SVGTransformCallbacks) / sizeof(*SVGTransformCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    
    batchConfigureConstants(desc, proto, SVGTransformConsts, sizeof(SVGTransformConsts) / sizeof(*SVGTransformConsts));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8SVGTransform::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8SVGTransformRawCache = createRawTemplate();
    return V8SVGTransformRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8SVGTransform::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8SVGTransformCache = ConfigureV8SVGTransformTemplate(GetRawTemplate());
    return V8SVGTransformCache;
}

V8SVGPODTypeWrapper<SVGTransform>* V8SVGTransform::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<V8SVGPODTypeWrapper<SVGTransform>*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8SVGTransform::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8SVGTransform::wrap(V8SVGPODTypeWrapper<SVGTransform>* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMSVGObjectWithContextMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMSVGObjectWithContextMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<V8SVGPODTypeWrapper<SVGTransform> > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(V8SVGPODTypeWrapper<SVGTransform>* impl)
{
    if (!impl)
        return v8::Null();
    return V8SVGTransform::wrap(impl);
}

void V8SVGTransform::derefObject(void* object)
{
    static_cast<V8SVGPODTypeWrapper<SVGTransform>*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(SVG)
