/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8IDBDatabase.h"

#if ENABLE(INDEXED_DATABASE)

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMStringList.h"
#include "V8DOMWrapper.h"
#include "V8IDBObjectStore.h"
#include "V8IDBRequest.h"
#include "V8IDBTransaction.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

namespace WebCore {

WrapperTypeInfo V8IDBDatabase::info = { V8IDBDatabase::GetTemplate, V8IDBDatabase::derefObject, 0 };

namespace IDBDatabaseInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBDatabase.name._get");
    IDBDatabase* imp = V8IDBDatabase::toNative(info.Holder());
    return v8String(imp->name());
}

static v8::Handle<v8::Value> versionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBDatabase.version._get");
    IDBDatabase* imp = V8IDBDatabase::toNative(info.Holder());
    return v8String(imp->version());
}

static v8::Handle<v8::Value> objectStoresAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBDatabase.objectStores._get");
    IDBDatabase* imp = V8IDBDatabase::toNative(info.Holder());
    RefPtr<DOMStringList> result = imp->objectStores();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setHiddenReference(info.Holder(), wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> createObjectStoreCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBDatabase.createObjectStore");
    IDBDatabase* imp = V8IDBDatabase::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, name, args[0]);
    if (args.Length() <= 1) {
        ScriptExecutionContext* scriptContext = getScriptExecutionContext();
        if (!scriptContext)
            return v8::Undefined();
        return toV8(imp->createObjectStore(scriptContext, name));
    }
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithNullCheck>, keyPath, args[1]);
    if (args.Length() <= 2) {
        ScriptExecutionContext* scriptContext = getScriptExecutionContext();
        if (!scriptContext)
            return v8::Undefined();
        return toV8(imp->createObjectStore(scriptContext, name, keyPath));
    }
    EXCEPTION_BLOCK(bool, autoIncrement, args[2]->BooleanValue());
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    if (!scriptContext)
        return v8::Undefined();
    return toV8(imp->createObjectStore(scriptContext, name, keyPath, autoIncrement));
}

static v8::Handle<v8::Value> objectStoreCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBDatabase.objectStore");
    IDBDatabase* imp = V8IDBDatabase::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, name, args[0]);
    if (args.Length() <= 1) {
        return toV8(imp->objectStore(name));
    }
    EXCEPTION_BLOCK(int, mode, toUInt32(args[1]));
    return toV8(imp->objectStore(name, mode));
}

static v8::Handle<v8::Value> removeObjectStoreCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBDatabase.removeObjectStore");
    IDBDatabase* imp = V8IDBDatabase::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, name, args[0]);
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    if (!scriptContext)
        return v8::Undefined();
    return toV8(imp->removeObjectStore(scriptContext, name));
}

static v8::Handle<v8::Value> setVersionCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBDatabase.setVersion");
    IDBDatabase* imp = V8IDBDatabase::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, version, args[0]);
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    if (!scriptContext)
        return v8::Undefined();
    return toV8(imp->setVersion(scriptContext, version));
}

static v8::Handle<v8::Value> transactionCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBDatabase.transaction");
    IDBDatabase* imp = V8IDBDatabase::toNative(args.Holder());
    if (args.Length() <= 0) {
        ScriptExecutionContext* scriptContext = getScriptExecutionContext();
        if (!scriptContext)
            return v8::Undefined();
        return toV8(imp->transaction(scriptContext));
    }
    EXCEPTION_BLOCK(DOMStringList*, storeNames, V8DOMStringList::HasInstance(args[0]) ? V8DOMStringList::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0);
    if (args.Length() <= 1) {
        ScriptExecutionContext* scriptContext = getScriptExecutionContext();
        if (!scriptContext)
            return v8::Undefined();
        return toV8(imp->transaction(scriptContext, storeNames));
    }
    EXCEPTION_BLOCK(int, mode, toUInt32(args[1]));
    if (args.Length() <= 2) {
        ScriptExecutionContext* scriptContext = getScriptExecutionContext();
        if (!scriptContext)
            return v8::Undefined();
        return toV8(imp->transaction(scriptContext, storeNames, mode));
    }
    EXCEPTION_BLOCK(unsigned, timeout, toUInt32(args[2]));
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    if (!scriptContext)
        return v8::Undefined();
    return toV8(imp->transaction(scriptContext, storeNames, mode, timeout));
}

} // namespace IDBDatabaseInternal

static const BatchedAttribute IDBDatabaseAttrs[] = {
    // Attribute 'name' (Type: 'readonly attribute' ExtAttr: '')
    {"name", IDBDatabaseInternal::nameAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'version' (Type: 'readonly attribute' ExtAttr: '')
    {"version", IDBDatabaseInternal::versionAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'objectStores' (Type: 'readonly attribute' ExtAttr: '')
    {"objectStores", IDBDatabaseInternal::objectStoresAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static const BatchedCallback IDBDatabaseCallbacks[] = {
    {"createObjectStore", IDBDatabaseInternal::createObjectStoreCallback},
    {"objectStore", IDBDatabaseInternal::objectStoreCallback},
    {"removeObjectStore", IDBDatabaseInternal::removeObjectStoreCallback},
    {"setVersion", IDBDatabaseInternal::setVersionCallback},
    {"transaction", IDBDatabaseInternal::transactionCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8IDBDatabaseTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "IDBDatabase", v8::Persistent<v8::FunctionTemplate>(), V8IDBDatabase::internalFieldCount,
        IDBDatabaseAttrs, sizeof(IDBDatabaseAttrs) / sizeof(*IDBDatabaseAttrs),
        IDBDatabaseCallbacks, sizeof(IDBDatabaseCallbacks) / sizeof(*IDBDatabaseCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8IDBDatabase::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8IDBDatabaseRawCache = createRawTemplate();
    return V8IDBDatabaseRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8IDBDatabase::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8IDBDatabaseCache = ConfigureV8IDBDatabaseTemplate(GetRawTemplate());
    return V8IDBDatabaseCache;
}

IDBDatabase* V8IDBDatabase::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<IDBDatabase*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8IDBDatabase::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8IDBDatabase::wrap(IDBDatabase* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMObjectMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<IDBDatabase > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(IDBDatabase* impl)
{
    if (!impl)
        return v8::Null();
    return V8IDBDatabase::wrap(impl);
}

void V8IDBDatabase::derefObject(void* object)
{
    static_cast<IDBDatabase*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(INDEXED_DATABASE)
