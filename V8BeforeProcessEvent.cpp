/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8BeforeProcessEvent.h"

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8Event.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8BeforeProcessEvent::info = { V8BeforeProcessEvent::GetTemplate, V8BeforeProcessEvent::derefObject, 0 };

namespace BeforeProcessEventInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> textAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.BeforeProcessEvent.text._get");
    BeforeProcessEvent* imp = V8BeforeProcessEvent::toNative(info.Holder());
    return v8String(imp->text());
}

static void textAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.BeforeProcessEvent.text._set");
    BeforeProcessEvent* imp = V8BeforeProcessEvent::toNative(info.Holder());
    V8Parameter<> v = value;
    imp->setText(v);
    return;
}

static v8::Handle<v8::Value> initBeforeProcessEventCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.BeforeProcessEvent.initBeforeProcessEvent");
    BeforeProcessEvent* imp = V8BeforeProcessEvent::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, type, args[0]);
    EXCEPTION_BLOCK(bool, canBubble, args[1]->BooleanValue());
    EXCEPTION_BLOCK(bool, cancelable, args[2]->BooleanValue());
    imp->initBeforeProcessEvent(type, canBubble, cancelable);
    return v8::Handle<v8::Value>();
}

} // namespace BeforeProcessEventInternal

static const BatchedAttribute BeforeProcessEventAttrs[] = {
    // Attribute 'text' (Type: 'attribute' ExtAttr: '')
    {"text", BeforeProcessEventInternal::textAttrGetter, BeforeProcessEventInternal::textAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static const BatchedCallback BeforeProcessEventCallbacks[] = {
    {"initBeforeProcessEvent", BeforeProcessEventInternal::initBeforeProcessEventCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8BeforeProcessEventTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "BeforeProcessEvent", V8Event::GetTemplate(), V8BeforeProcessEvent::internalFieldCount,
        BeforeProcessEventAttrs, sizeof(BeforeProcessEventAttrs) / sizeof(*BeforeProcessEventAttrs),
        BeforeProcessEventCallbacks, sizeof(BeforeProcessEventCallbacks) / sizeof(*BeforeProcessEventCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8BeforeProcessEvent::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8BeforeProcessEventRawCache = createRawTemplate();
    return V8BeforeProcessEventRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8BeforeProcessEvent::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8BeforeProcessEventCache = ConfigureV8BeforeProcessEventTemplate(GetRawTemplate());
    return V8BeforeProcessEventCache;
}

BeforeProcessEvent* V8BeforeProcessEvent::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<BeforeProcessEvent*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8BeforeProcessEvent::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8BeforeProcessEvent::wrap(BeforeProcessEvent* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMObjectMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<BeforeProcessEvent > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(BeforeProcessEvent* impl)
{
    if (!impl)
        return v8::Null();
    return V8BeforeProcessEvent::wrap(impl);
}

void V8BeforeProcessEvent::derefObject(void* object)
{
    static_cast<BeforeProcessEvent*>(object)->deref();
}

} // namespace WebCore
