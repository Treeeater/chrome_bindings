/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8InjectedScriptHost.h"

#if ENABLE(INSPECTOR)

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8InjectedScriptHost::info = { V8InjectedScriptHost::GetTemplate, V8InjectedScriptHost::derefObject, 0 };

namespace InjectedScriptHostInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> clearConsoleMessagesCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.InjectedScriptHost.clearConsoleMessages");
    InjectedScriptHost* imp = V8InjectedScriptHost::toNative(args.Holder());
    imp->clearConsoleMessages();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> copyTextCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.InjectedScriptHost.copyText");
    InjectedScriptHost* imp = V8InjectedScriptHost::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, text, args[0]);
    imp->copyText(text);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> inspectedNodeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.InjectedScriptHost.inspectedNode");
    InjectedScriptHost* imp = V8InjectedScriptHost::toNative(args.Holder());
    EXCEPTION_BLOCK(unsigned, num, toUInt32(args[0]));
    return v8::Integer::New(imp->inspectedNode(num));
}

static v8::Handle<v8::Value> didCreateWorkerCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.InjectedScriptHost.didCreateWorker");
    InjectedScriptHost* imp = V8InjectedScriptHost::toNative(args.Holder());
    EXCEPTION_BLOCK(int, id, toInt32(args[0]));
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, url, args[1]);
    EXCEPTION_BLOCK(bool, isFakeWorker, args[2]->BooleanValue());
    imp->didCreateWorker(id, url, isFakeWorker);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> didDestroyWorkerCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.InjectedScriptHost.didDestroyWorker");
    InjectedScriptHost* imp = V8InjectedScriptHost::toNative(args.Holder());
    EXCEPTION_BLOCK(int, id, toInt32(args[0]));
    imp->didDestroyWorker(id);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> nextWorkerIdCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.InjectedScriptHost.nextWorkerId");
    InjectedScriptHost* imp = V8InjectedScriptHost::toNative(args.Holder());
    return v8::Integer::New(imp->nextWorkerId());
}

} // namespace InjectedScriptHostInternal

static const BatchedCallback InjectedScriptHostCallbacks[] = {
    {"clearConsoleMessages", InjectedScriptHostInternal::clearConsoleMessagesCallback},
    {"copyText", InjectedScriptHostInternal::copyTextCallback},
    {"nodeForId", V8InjectedScriptHost::nodeForIdCallback},
    {"pushNodePathToFrontend", V8InjectedScriptHost::pushNodePathToFrontendCallback},
    {"inspectedNode", InjectedScriptHostInternal::inspectedNodeCallback},
    {"currentCallFrame", V8InjectedScriptHost::currentCallFrameCallback},
    {"selectDatabase", V8InjectedScriptHost::selectDatabaseCallback},
    {"selectDOMStorage", V8InjectedScriptHost::selectDOMStorageCallback},
    {"didCreateWorker", InjectedScriptHostInternal::didCreateWorkerCallback},
    {"didDestroyWorker", InjectedScriptHostInternal::didDestroyWorkerCallback},
    {"nextWorkerId", InjectedScriptHostInternal::nextWorkerIdCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8InjectedScriptHostTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "InjectedScriptHost", v8::Persistent<v8::FunctionTemplate>(), V8InjectedScriptHost::internalFieldCount,
        0, 0,
        InjectedScriptHostCallbacks, sizeof(InjectedScriptHostCallbacks) / sizeof(*InjectedScriptHostCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8InjectedScriptHost::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8InjectedScriptHostRawCache = createRawTemplate();
    return V8InjectedScriptHostRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8InjectedScriptHost::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8InjectedScriptHostCache = ConfigureV8InjectedScriptHostTemplate(GetRawTemplate());
    return V8InjectedScriptHostCache;
}

InjectedScriptHost* V8InjectedScriptHost::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<InjectedScriptHost*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8InjectedScriptHost::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8InjectedScriptHost::wrap(InjectedScriptHost* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMObjectMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<InjectedScriptHost > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(InjectedScriptHost* impl)
{
    if (!impl)
        return v8::Null();
    return V8InjectedScriptHost::wrap(impl);
}

void V8InjectedScriptHost::derefObject(void* object)
{
    static_cast<InjectedScriptHost*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(INSPECTOR)
