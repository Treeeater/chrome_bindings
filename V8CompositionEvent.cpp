/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8CompositionEvent.h"

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWindow.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include "V8UIEvent.h"

namespace WebCore {

WrapperTypeInfo V8CompositionEvent::info = { V8CompositionEvent::GetTemplate, V8CompositionEvent::derefObject, 0 };

namespace CompositionEventInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> dataAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.CompositionEvent.data._get");
    CompositionEvent* imp = V8CompositionEvent::toNative(info.Holder());
    return v8String(imp->data());
}

static v8::Handle<v8::Value> initCompositionEventCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.CompositionEvent.initCompositionEvent");
    CompositionEvent* imp = V8CompositionEvent::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, typeArg, args[0]);
    EXCEPTION_BLOCK(bool, canBubbleArg, args[1]->BooleanValue());
    EXCEPTION_BLOCK(bool, cancelableArg, args[2]->BooleanValue());
    EXCEPTION_BLOCK(DOMWindow*, viewArg, V8DOMWindow::HasInstance(args[3]) ? V8DOMWindow::toNative(v8::Handle<v8::Object>::Cast(args[3])) : 0);
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, dataArg, args[4]);
    imp->initCompositionEvent(typeArg, canBubbleArg, cancelableArg, viewArg, dataArg);
    return v8::Handle<v8::Value>();
}

} // namespace CompositionEventInternal

static const BatchedAttribute CompositionEventAttrs[] = {
    // Attribute 'data' (Type: 'readonly attribute' ExtAttr: '')
    {"data", CompositionEventInternal::dataAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8CompositionEventTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "CompositionEvent", V8UIEvent::GetTemplate(), V8CompositionEvent::internalFieldCount,
        CompositionEventAttrs, sizeof(CompositionEventAttrs) / sizeof(*CompositionEventAttrs),
        0, 0);
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom Signature 'initCompositionEvent'
    const int initCompositionEventArgc = 5;
    v8::Handle<v8::FunctionTemplate> initCompositionEventArgv[initCompositionEventArgc] = { v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), V8DOMWindow::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> initCompositionEventSignature = v8::Signature::New(desc, initCompositionEventArgc, initCompositionEventArgv);
    proto->Set(v8::String::New("initCompositionEvent"), v8::FunctionTemplate::New(CompositionEventInternal::initCompositionEventCallback, v8::Handle<v8::Value>(), initCompositionEventSignature));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8CompositionEvent::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8CompositionEventRawCache = createRawTemplate();
    return V8CompositionEventRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8CompositionEvent::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8CompositionEventCache = ConfigureV8CompositionEventTemplate(GetRawTemplate());
    return V8CompositionEventCache;
}

CompositionEvent* V8CompositionEvent::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<CompositionEvent*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8CompositionEvent::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8CompositionEvent::wrap(CompositionEvent* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMObjectMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<CompositionEvent > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(CompositionEvent* impl)
{
    if (!impl)
        return v8::Null();
    return V8CompositionEvent::wrap(impl);
}

void V8CompositionEvent::derefObject(void* object)
{
    static_cast<CompositionEvent*>(object)->deref();
}

} // namespace WebCore
