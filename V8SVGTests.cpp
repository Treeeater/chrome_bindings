/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8SVGTests.h"

#if ENABLE(SVG)

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include "V8SVGStringList.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

namespace WebCore {

WrapperTypeInfo V8SVGTests::info = { V8SVGTests::GetTemplate, V8SVGTests::derefObject, 0 };

namespace SVGTestsInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> requiredFeaturesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGTests.requiredFeatures._get");
    SVGTests* imp = V8SVGTests::toNative(info.Holder());
    SVGElement* context = V8Proxy::svgContext(imp);
    PassRefPtr<SVGStringList> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->requiredFeatures(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> requiredExtensionsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGTests.requiredExtensions._get");
    SVGTests* imp = V8SVGTests::toNative(info.Holder());
    SVGElement* context = V8Proxy::svgContext(imp);
    PassRefPtr<SVGStringList> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->requiredExtensions(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> systemLanguageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGTests.systemLanguage._get");
    SVGTests* imp = V8SVGTests::toNative(info.Holder());
    SVGElement* context = V8Proxy::svgContext(imp);
    PassRefPtr<SVGStringList> resultAsPassRefPtr = V8Proxy::withSVGContext(imp->systemLanguage(), context);
    return toV8(resultAsPassRefPtr);
}

static v8::Handle<v8::Value> hasExtensionCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGTests.hasExtension");
    SVGTests* imp = V8SVGTests::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, extension, args[0]);
    return v8Boolean(imp->hasExtension(extension));
}

} // namespace SVGTestsInternal

static const BatchedAttribute SVGTestsAttrs[] = {
    // Attribute 'requiredFeatures' (Type: 'readonly attribute' ExtAttr: '')
    {"requiredFeatures", SVGTestsInternal::requiredFeaturesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'requiredExtensions' (Type: 'readonly attribute' ExtAttr: '')
    {"requiredExtensions", SVGTestsInternal::requiredExtensionsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'systemLanguage' (Type: 'readonly attribute' ExtAttr: '')
    {"systemLanguage", SVGTestsInternal::systemLanguageAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static const BatchedCallback SVGTestsCallbacks[] = {
    {"hasExtension", SVGTestsInternal::hasExtensionCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8SVGTestsTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "SVGTests", v8::Persistent<v8::FunctionTemplate>(), V8SVGTests::internalFieldCount,
        SVGTestsAttrs, sizeof(SVGTestsAttrs) / sizeof(*SVGTestsAttrs),
        SVGTestsCallbacks, sizeof(SVGTestsCallbacks) / sizeof(*SVGTestsCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8SVGTests::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8SVGTestsRawCache = createRawTemplate();
    return V8SVGTestsRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8SVGTests::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8SVGTestsCache = ConfigureV8SVGTestsTemplate(GetRawTemplate());
    return V8SVGTestsCache;
}

SVGTests* V8SVGTests::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<SVGTests*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8SVGTests::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8SVGTests::wrap(SVGTests* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMSVGObjectWithContextMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMSVGObjectWithContextMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<SVGTests > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(SVGTests* impl)
{
    if (!impl)
        return v8::Null();
    return V8SVGTests::wrap(impl);
}

void V8SVGTests::derefObject(void* object)
{
    static_cast<SVGTests*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(SVG)
