/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8SVGUnitTypes.h"

#if ENABLE(SVG)

#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8SVGUnitTypes::info = { V8SVGUnitTypes::GetTemplate, V8SVGUnitTypes::derefObject, 0 };

namespace SVGUnitTypesInternal {

template <typename T> void V8_USE(T) { }

} // namespace SVGUnitTypesInternal

static const BatchedConstant SVGUnitTypesConsts[] = {
    {"SVG_UNIT_TYPE_UNKNOWN", static_cast<signed int>(0)},
    {"SVG_UNIT_TYPE_USERSPACEONUSE", static_cast<signed int>(1)},
    {"SVG_UNIT_TYPE_OBJECTBOUNDINGBOX", static_cast<signed int>(2)},
};

COMPILE_ASSERT(0 == SVGUnitTypes::SVG_UNIT_TYPE_UNKNOWN, SVGUnitTypesEnumSVG_UNIT_TYPE_UNKNOWNIsWrongUseDontCheckEnums);
COMPILE_ASSERT(1 == SVGUnitTypes::SVG_UNIT_TYPE_USERSPACEONUSE, SVGUnitTypesEnumSVG_UNIT_TYPE_USERSPACEONUSEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(2 == SVGUnitTypes::SVG_UNIT_TYPE_OBJECTBOUNDINGBOX, SVGUnitTypesEnumSVG_UNIT_TYPE_OBJECTBOUNDINGBOXIsWrongUseDontCheckEnums);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8SVGUnitTypesTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "SVGUnitTypes", v8::Persistent<v8::FunctionTemplate>(), V8SVGUnitTypes::internalFieldCount,
        0, 0,
        0, 0);
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    
    batchConfigureConstants(desc, proto, SVGUnitTypesConsts, sizeof(SVGUnitTypesConsts) / sizeof(*SVGUnitTypesConsts));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8SVGUnitTypes::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8SVGUnitTypesRawCache = createRawTemplate();
    return V8SVGUnitTypesRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8SVGUnitTypes::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8SVGUnitTypesCache = ConfigureV8SVGUnitTypesTemplate(GetRawTemplate());
    return V8SVGUnitTypesCache;
}

SVGUnitTypes* V8SVGUnitTypes::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<SVGUnitTypes*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8SVGUnitTypes::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8SVGUnitTypes::wrap(SVGUnitTypes* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMSVGObjectWithContextMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMSVGObjectWithContextMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<SVGUnitTypes > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(SVGUnitTypes* impl)
{
    if (!impl)
        return v8::Null();
    return V8SVGUnitTypes::wrap(impl);
}

void V8SVGUnitTypes::derefObject(void* object)
{
    static_cast<SVGUnitTypes*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(SVG)
