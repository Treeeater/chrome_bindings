/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8Timing.h"

#if ENABLE(WEB_TIMING)

#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8Timing::info = { V8Timing::GetTemplate, V8Timing::derefObject, 0 };

namespace TimingInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> navigationStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Timing.navigationStart._get");
    Timing* imp = V8Timing::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->navigationStart()));
}

static v8::Handle<v8::Value> unloadEventEndAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Timing.unloadEventEnd._get");
    Timing* imp = V8Timing::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->unloadEventEnd()));
}

static v8::Handle<v8::Value> redirectStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Timing.redirectStart._get");
    Timing* imp = V8Timing::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->redirectStart()));
}

static v8::Handle<v8::Value> redirectEndAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Timing.redirectEnd._get");
    Timing* imp = V8Timing::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->redirectEnd()));
}

static v8::Handle<v8::Value> fetchStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Timing.fetchStart._get");
    Timing* imp = V8Timing::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->fetchStart()));
}

static v8::Handle<v8::Value> domainLookupStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Timing.domainLookupStart._get");
    Timing* imp = V8Timing::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->domainLookupStart()));
}

static v8::Handle<v8::Value> domainLookupEndAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Timing.domainLookupEnd._get");
    Timing* imp = V8Timing::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->domainLookupEnd()));
}

static v8::Handle<v8::Value> connectStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Timing.connectStart._get");
    Timing* imp = V8Timing::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->connectStart()));
}

static v8::Handle<v8::Value> connectEndAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Timing.connectEnd._get");
    Timing* imp = V8Timing::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->connectEnd()));
}

static v8::Handle<v8::Value> requestStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Timing.requestStart._get");
    Timing* imp = V8Timing::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->requestStart()));
}

static v8::Handle<v8::Value> requestEndAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Timing.requestEnd._get");
    Timing* imp = V8Timing::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->requestEnd()));
}

static v8::Handle<v8::Value> responseStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Timing.responseStart._get");
    Timing* imp = V8Timing::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->responseStart()));
}

static v8::Handle<v8::Value> responseEndAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Timing.responseEnd._get");
    Timing* imp = V8Timing::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->responseEnd()));
}

static v8::Handle<v8::Value> loadEventStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Timing.loadEventStart._get");
    Timing* imp = V8Timing::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->loadEventStart()));
}

static v8::Handle<v8::Value> loadEventEndAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Timing.loadEventEnd._get");
    Timing* imp = V8Timing::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->loadEventEnd()));
}

} // namespace TimingInternal

static const BatchedAttribute TimingAttrs[] = {
    // Attribute 'navigationStart' (Type: 'readonly attribute' ExtAttr: '')
    {"navigationStart", TimingInternal::navigationStartAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'unloadEventEnd' (Type: 'readonly attribute' ExtAttr: '')
    {"unloadEventEnd", TimingInternal::unloadEventEndAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'redirectStart' (Type: 'readonly attribute' ExtAttr: '')
    {"redirectStart", TimingInternal::redirectStartAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'redirectEnd' (Type: 'readonly attribute' ExtAttr: '')
    {"redirectEnd", TimingInternal::redirectEndAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'fetchStart' (Type: 'readonly attribute' ExtAttr: '')
    {"fetchStart", TimingInternal::fetchStartAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'domainLookupStart' (Type: 'readonly attribute' ExtAttr: '')
    {"domainLookupStart", TimingInternal::domainLookupStartAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'domainLookupEnd' (Type: 'readonly attribute' ExtAttr: '')
    {"domainLookupEnd", TimingInternal::domainLookupEndAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'connectStart' (Type: 'readonly attribute' ExtAttr: '')
    {"connectStart", TimingInternal::connectStartAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'connectEnd' (Type: 'readonly attribute' ExtAttr: '')
    {"connectEnd", TimingInternal::connectEndAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'requestStart' (Type: 'readonly attribute' ExtAttr: '')
    {"requestStart", TimingInternal::requestStartAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'requestEnd' (Type: 'readonly attribute' ExtAttr: '')
    {"requestEnd", TimingInternal::requestEndAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'responseStart' (Type: 'readonly attribute' ExtAttr: '')
    {"responseStart", TimingInternal::responseStartAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'responseEnd' (Type: 'readonly attribute' ExtAttr: '')
    {"responseEnd", TimingInternal::responseEndAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'loadEventStart' (Type: 'readonly attribute' ExtAttr: '')
    {"loadEventStart", TimingInternal::loadEventStartAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'loadEventEnd' (Type: 'readonly attribute' ExtAttr: '')
    {"loadEventEnd", TimingInternal::loadEventEndAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8TimingTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "Timing", v8::Persistent<v8::FunctionTemplate>(), V8Timing::internalFieldCount,
        TimingAttrs, sizeof(TimingAttrs) / sizeof(*TimingAttrs),
        0, 0);
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8Timing::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8TimingRawCache = createRawTemplate();
    return V8TimingRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8Timing::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8TimingCache = ConfigureV8TimingTemplate(GetRawTemplate());
    return V8TimingCache;
}

Timing* V8Timing::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<Timing*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8Timing::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8Timing::wrap(Timing* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMObjectMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<Timing > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(Timing* impl)
{
    if (!impl)
        return v8::Null();
    return V8Timing::wrap(impl);
}

void V8Timing::derefObject(void* object)
{
    static_cast<Timing*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(WEB_TIMING)
