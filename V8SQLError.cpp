/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8SQLError.h"

#if ENABLE(DATABASE)

#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8SQLError::info = { V8SQLError::GetTemplate, V8SQLError::derefObject, 0 };

namespace SQLErrorInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> codeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SQLError.code._get");
    SQLError* imp = V8SQLError::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->code());
}

static v8::Handle<v8::Value> messageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SQLError.message._get");
    SQLError* imp = V8SQLError::toNative(info.Holder());
    return v8String(imp->message());
}

} // namespace SQLErrorInternal

static const BatchedAttribute SQLErrorAttrs[] = {
    // Attribute 'code' (Type: 'readonly attribute' ExtAttr: '')
    {"code", SQLErrorInternal::codeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'message' (Type: 'readonly attribute' ExtAttr: '')
    {"message", SQLErrorInternal::messageAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static const BatchedConstant SQLErrorConsts[] = {
    {"UNKNOWN_ERR", static_cast<signed int>(0)},
    {"DATABASE_ERR", static_cast<signed int>(1)},
    {"VERSION_ERR", static_cast<signed int>(2)},
    {"TOO_LARGE_ERR", static_cast<signed int>(3)},
    {"QUOTA_ERR", static_cast<signed int>(4)},
    {"SYNTAX_ERR", static_cast<signed int>(5)},
    {"CONSTRAINT_ERR", static_cast<signed int>(6)},
    {"TIMEOUT_ERR", static_cast<signed int>(7)},
};

COMPILE_ASSERT(0 == SQLError::UNKNOWN_ERR, SQLErrorEnumUNKNOWN_ERRIsWrongUseDontCheckEnums);
COMPILE_ASSERT(1 == SQLError::DATABASE_ERR, SQLErrorEnumDATABASE_ERRIsWrongUseDontCheckEnums);
COMPILE_ASSERT(2 == SQLError::VERSION_ERR, SQLErrorEnumVERSION_ERRIsWrongUseDontCheckEnums);
COMPILE_ASSERT(3 == SQLError::TOO_LARGE_ERR, SQLErrorEnumTOO_LARGE_ERRIsWrongUseDontCheckEnums);
COMPILE_ASSERT(4 == SQLError::QUOTA_ERR, SQLErrorEnumQUOTA_ERRIsWrongUseDontCheckEnums);
COMPILE_ASSERT(5 == SQLError::SYNTAX_ERR, SQLErrorEnumSYNTAX_ERRIsWrongUseDontCheckEnums);
COMPILE_ASSERT(6 == SQLError::CONSTRAINT_ERR, SQLErrorEnumCONSTRAINT_ERRIsWrongUseDontCheckEnums);
COMPILE_ASSERT(7 == SQLError::TIMEOUT_ERR, SQLErrorEnumTIMEOUT_ERRIsWrongUseDontCheckEnums);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8SQLErrorTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "SQLError", v8::Persistent<v8::FunctionTemplate>(), V8SQLError::internalFieldCount,
        SQLErrorAttrs, sizeof(SQLErrorAttrs) / sizeof(*SQLErrorAttrs),
        0, 0);
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    
    batchConfigureConstants(desc, proto, SQLErrorConsts, sizeof(SQLErrorConsts) / sizeof(*SQLErrorConsts));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8SQLError::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8SQLErrorRawCache = createRawTemplate();
    return V8SQLErrorRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8SQLError::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8SQLErrorCache = ConfigureV8SQLErrorTemplate(GetRawTemplate());
    return V8SQLErrorCache;
}

SQLError* V8SQLError::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<SQLError*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8SQLError::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8SQLError::wrap(SQLError* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMObjectMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<SQLError > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(SQLError* impl)
{
    if (!impl)
        return v8::Null();
    return V8SQLError::wrap(impl);
}

void V8SQLError::derefObject(void* object)
{
    static_cast<SQLError*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(DATABASE)
