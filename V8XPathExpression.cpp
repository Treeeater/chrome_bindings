/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8XPathExpression.h"

#if ENABLE(XPATH)

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Node.h"
#include "V8Proxy.h"
#include "V8XPathResult.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

namespace WebCore {

WrapperTypeInfo V8XPathExpression::info = { V8XPathExpression::GetTemplate, V8XPathExpression::derefObject, 0 };

namespace XPathExpressionInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> evaluateCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.XPathExpression.evaluate");
    XPathExpression* imp = V8XPathExpression::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Node*, contextNode, V8Node::HasInstance(args[0]) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0);
    EXCEPTION_BLOCK(int, type, toUInt32(args[1]));
    EXCEPTION_BLOCK(XPathResult*, inResult, V8XPathResult::HasInstance(args[2]) ? V8XPathResult::toNative(v8::Handle<v8::Object>::Cast(args[2])) : 0);
    RefPtr<XPathResult> result = imp->evaluate(contextNode, type, inResult, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

} // namespace XPathExpressionInternal

static v8::Persistent<v8::FunctionTemplate> ConfigureV8XPathExpressionTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "XPathExpression", v8::Persistent<v8::FunctionTemplate>(), V8XPathExpression::internalFieldCount,
        0, 0,
        0, 0);
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom Signature 'evaluate'
    const int evaluateArgc = 3;
    v8::Handle<v8::FunctionTemplate> evaluateArgv[evaluateArgc] = { V8Node::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), V8XPathResult::GetRawTemplate() };
    v8::Handle<v8::Signature> evaluateSignature = v8::Signature::New(desc, evaluateArgc, evaluateArgv);
    proto->Set(v8::String::New("evaluate"), v8::FunctionTemplate::New(XPathExpressionInternal::evaluateCallback, v8::Handle<v8::Value>(), evaluateSignature));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8XPathExpression::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8XPathExpressionRawCache = createRawTemplate();
    return V8XPathExpressionRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8XPathExpression::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8XPathExpressionCache = ConfigureV8XPathExpressionTemplate(GetRawTemplate());
    return V8XPathExpressionCache;
}

XPathExpression* V8XPathExpression::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<XPathExpression*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8XPathExpression::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8XPathExpression::wrap(XPathExpression* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMObjectMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<XPathExpression > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(XPathExpression* impl)
{
    if (!impl)
        return v8::Null();
    return V8XPathExpression::wrap(impl);
}

void V8XPathExpression::derefObject(void* object)
{
    static_cast<XPathExpression*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(XPATH)
