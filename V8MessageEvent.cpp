/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8MessageEvent.h"

#include "RuntimeEnabledFeatures.h"
#include "SerializedScriptValue.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWindow.h"
#include "V8DOMWrapper.h"
#include "V8Event.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

namespace WebCore {

WrapperTypeInfo V8MessageEvent::info = { V8MessageEvent::GetTemplate, V8MessageEvent::derefObject, 0 };

namespace MessageEventInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> originAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.MessageEvent.origin._get");
    MessageEvent* imp = V8MessageEvent::toNative(info.Holder());
    return v8String(imp->origin());
}

static v8::Handle<v8::Value> lastEventIdAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.MessageEvent.lastEventId._get");
    MessageEvent* imp = V8MessageEvent::toNative(info.Holder());
    return v8String(imp->lastEventId());
}

static v8::Handle<v8::Value> sourceAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.MessageEvent.source._get");
    MessageEvent* imp = V8MessageEvent::toNative(info.Holder());
    return toV8(imp->source());
}

} // namespace MessageEventInternal

static const BatchedAttribute MessageEventAttrs[] = {
    // Attribute 'origin' (Type: 'readonly attribute' ExtAttr: '')
    {"origin", MessageEventInternal::originAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'lastEventId' (Type: 'readonly attribute' ExtAttr: '')
    {"lastEventId", MessageEventInternal::lastEventIdAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'source' (Type: 'readonly attribute' ExtAttr: '')
    {"source", MessageEventInternal::sourceAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'ports' (Type: 'readonly attribute' ExtAttr: 'CustomGetter')
    {"ports", V8MessageEvent::portsAccessorGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};
static const BatchedCallback MessageEventCallbacks[] = {
    {"initMessageEvent", V8MessageEvent::initMessageEventCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8MessageEventTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "MessageEvent", V8Event::GetTemplate(), V8MessageEvent::internalFieldCount,
        MessageEventAttrs, sizeof(MessageEventAttrs) / sizeof(*MessageEventAttrs),
        MessageEventCallbacks, sizeof(MessageEventCallbacks) / sizeof(*MessageEventCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8MessageEvent::GetRawTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8MessageEventRawCache = createRawTemplate();
    return V8MessageEventRawCache;
}

v8::Persistent<v8::FunctionTemplate> V8MessageEvent::GetTemplate()
{
    static v8::Persistent<v8::FunctionTemplate> V8MessageEventCache = ConfigureV8MessageEventTemplate(GetRawTemplate());
    return V8MessageEventCache;
}

MessageEvent* V8MessageEvent::toNative(v8::Handle<v8::Object> object)
{
    return reinterpret_cast<MessageEvent*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8MessageEvent::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8MessageEvent::wrap(MessageEvent* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
        wrapper = getDOMObjectMap().get(impl);
        if (!wrapper.IsEmpty())
            return wrapper;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    SerializedScriptValue::deserializeAndSetProperty(wrapper, "data", static_cast<v8::PropertyAttribute>(v8::DontDelete | v8::ReadOnly), impl->data());
    getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
    return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<MessageEvent > impl)
{
    return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(MessageEvent* impl)
{
    if (!impl)
        return v8::Null();
    return V8MessageEvent::wrap(impl);
}

void V8MessageEvent::derefObject(void* object)
{
    static_cast<MessageEvent*>(object)->deref();
}

} // namespace WebCore
